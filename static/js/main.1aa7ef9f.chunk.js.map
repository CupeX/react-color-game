{"version":3,"sources":["components/ButtonComponent.js","components/colorBoxes.js","components/HexGenerator.js","components/HexToRgb.js","components/mainVisual.js","App.js","reportWebVitals.js","index.js"],"names":["ButtonComponent","props","Button","color","onClick","className","children","ColorBoxes","score","onSaveScore","onResetScore","background","map","x","style","onCheckColor","nanoid","hexGenerator","length","result","characters","charactersLength","i","charAt","Math","floor","random","hexToRgb","y","newArray","hexBase","cutter","substring","match","indexOf","push","MainVisual","useState","boxesNumber","setBoxesNumber","scoreCounter","setScoreCounter","setColors","trueColor","setTrueColor","rgbResult","setRgbResult","isHex","setIsHex","isGenerated","setIsGenerated","setScore","reducedBoxesList","setReducedBoxesList","useEffect","getNewColors","newColors","Array","from","keys","randomer","lvlHandler","prop","resetHandler","window","localStorage","getItem","alert","updatedList","filter","item","removeItem","setItem","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1aa7ef9f.chunk.js","sourcesContent":["import { Button } from 'reactstrap';\r\n\r\nconst ButtonComponent = props => {\r\n  return (\r\n    <Button\r\n      color={props.color}\r\n      onClick={() => props.onClick()}\r\n      className={props.className}\r\n    >\r\n      {props.children}\r\n    </Button>\r\n  );\r\n};\r\n\r\nexport default ButtonComponent;\r\n","import { nanoid } from 'nanoid';\r\n// import { useEffect, useState } from 'react';\r\nimport ButtonComponent from './ButtonComponent';\r\n\r\nconst ColorBoxes = props => {\r\n  return (\r\n    <div>\r\n      <h2>empty</h2>\r\n      <div className=\"d-flex justify-content-between my-3\">\r\n        <h2>score: {props.score}</h2>\r\n        <ButtonComponent onClick={props.onSaveScore} color=\"success\">\r\n          save score\r\n        </ButtonComponent>\r\n        <ButtonComponent onClick={props.onResetScore} color=\"danger\">\r\n          reset score\r\n        </ButtonComponent>\r\n      </div>\r\n      <div className=\"d-flex flex-wrap justify-content-between\">\r\n        {props.background.map(x => (\r\n          <div key={nanoid()} className=\"col-4\">\r\n            <button\r\n              className=\"box p-5 my-3\"\r\n              style={{ background: x }}\r\n              onClick={() => props.onCheckColor(x)}\r\n            ></button>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ColorBoxes;\r\n","const hexGenerator = length => {\r\n  var result = '#';\r\n  var characters = 'abcdef0123456789';\r\n  var charactersLength = characters.length;\r\n  for (let i = 0; i < length; i++) {\r\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\r\n  }\r\n  return result;\r\n};\r\n\r\nexport default hexGenerator;\r\n","const hexToRgb = (x, y) => {\r\n  const newArray = [];\r\n  const isLoaded = y;\r\n\r\n  const hexBase = [\r\n    '0',\r\n    '1',\r\n    '2',\r\n    '3',\r\n    '4',\r\n    '5',\r\n    '6',\r\n    '7',\r\n    '8',\r\n    '9',\r\n    'a',\r\n    'b',\r\n    'c',\r\n    'd',\r\n    'e',\r\n    'f',\r\n  ];\r\n  if (isLoaded) {\r\n    const cutter = x.substring(1).match(/.{1,2}/g);\r\n    for (let i = 0; i < cutter.length; i++) {\r\n      const value1 = hexBase.indexOf(cutter[i][0]) * 16;\r\n      const value2 = hexBase.indexOf(cutter[i][1]);\r\n      const result = value1 + value2 + ', ';\r\n      newArray.push(result);\r\n    }\r\n  }\r\n  return newArray;\r\n};\r\n\r\nexport default hexToRgb;\r\n","import { useState, useEffect } from 'react';\r\nimport ButtonComponent from './ButtonComponent';\r\nimport ColorBoxes from './colorBoxes';\r\nimport hexGenerator from './HexGenerator';\r\nimport hexToRgb from './HexToRgb';\r\n\r\nconst MainVisual = () => {\r\n  const [boxesNumber, setBoxesNumber] = useState(3);\r\n  const [scoreCounter, setScoreCounter] = useState(1);\r\n  const [colors, setColors] = useState([]);\r\n  const [trueColor, setTrueColor] = useState('');\r\n  const [rgbResult, setRgbResult] = useState([]);\r\n  const [isHex, setIsHex] = useState(true);\r\n  const [isGenerated, setIsGenerated] = useState(false);\r\n  const [score, setScore] = useState(0);\r\n  const [reducedBoxesList, setReducedBoxesList] = useState([]);\r\n\r\n  useEffect(() => {\r\n    getNewColors();\r\n    setRgbResult(hexToRgb(trueColor, isGenerated));\r\n  }, [boxesNumber, isGenerated]);\r\n\r\n  const getNewColors = () => {\r\n    const newColors = Array.from(Array(boxesNumber).keys()).map(() =>\r\n      hexGenerator(6)\r\n    );\r\n\r\n    const randomer = newColors[Math.floor(Math.random() * newColors.length)];\r\n    setTrueColor(randomer);\r\n    setColors(newColors);\r\n    setReducedBoxesList(newColors);\r\n    setIsGenerated(true);\r\n  };\r\n\r\n  const lvlHandler = prop => {\r\n    setBoxesNumber(prop);\r\n    setRgbResult([]);\r\n    setIsGenerated(false);\r\n  };\r\n\r\n  const resetHandler = () => {\r\n    getNewColors();\r\n    setRgbResult([]);\r\n    setIsGenerated(false);\r\n  };\r\n\r\n  const colorToggler = () => {\r\n    setIsHex(!isHex);\r\n  };\r\n\r\n  const checkColorHandler = x => {\r\n    if (x === trueColor) {\r\n      alert(\r\n        `Good job! You get it after ${scoreCounter} attempts, and recive ${\r\n          boxesNumber - scoreCounter + 1\r\n        } points!`\r\n      );\r\n      setScoreCounter(1);\r\n      setScore(score + boxesNumber - scoreCounter + 1);\r\n      resetHandler();\r\n    } else {\r\n      const updatedList = reducedBoxesList.filter(item => x !== item);\r\n      setReducedBoxesList(updatedList);\r\n      setScoreCounter(scoreCounter + 1);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setScore(+window.localStorage.getItem('score'));\r\n  }, []);\r\n\r\n  const resetScore = () => {\r\n    setScore(0);\r\n    window.localStorage.removeItem('score');\r\n  };\r\n\r\n  const saveScore = () => {\r\n    window.localStorage.setItem('score', score);\r\n  };\r\n\r\n  return (\r\n    <div className=\"container d-flex flex-column mt-5 col-xl-4 col-lg-6\">\r\n      <div className=\"border-bottom border-dark mb-3\">\r\n        <h3>Guess the color?</h3>\r\n        {isHex ? <h3>hex: {trueColor}</h3> : <h3>rgb: {rgbResult}</h3>}\r\n        <ButtonComponent\r\n          onClick={() => colorToggler()}\r\n          color=\"primary\"\r\n          className=\"my-3\"\r\n        >\r\n          {isHex ? 'convert to RGB' : 'convert to HEX'}\r\n        </ButtonComponent>\r\n      </div>\r\n\r\n      <div className=\"d-flex justify-content-between border-bottom border-dark pb-3\">\r\n        <ButtonComponent onClick={() => lvlHandler(3)} color=\"success\">\r\n          lvl 1\r\n        </ButtonComponent>\r\n        <ButtonComponent onClick={() => lvlHandler(6)} color=\"success\">\r\n          lvl 2\r\n        </ButtonComponent>\r\n        <ButtonComponent onClick={() => lvlHandler(9)} color=\"success\">\r\n          lvl 3\r\n        </ButtonComponent>\r\n\r\n        <ButtonComponent onClick={() => resetHandler()} color=\"danger\">\r\n          RESET LVL\r\n        </ButtonComponent>\r\n      </div>\r\n      <ColorBoxes\r\n        onCheckColor={checkColorHandler}\r\n        onResetScore={() => resetScore()}\r\n        onSaveScore={() => saveScore()}\r\n        background={reducedBoxesList}\r\n        trueColor={trueColor}\r\n        score={score}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MainVisual;\r\n","import './App.css';\nimport MainVisual from './components/mainVisual';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainVisual />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}