{"version":3,"sources":["utils/hexGenerator.js","utils/generateGameColors.js","store/gameInProgress.js","hooks/useGameInProgress.js","hooks/useCheckRightColor.js","components/ColorGamePlayground.jsx","store/gameSettings.js","common/ButtonComponent.jsx","common/RadioBtns.jsx","components/FormComponent.jsx","utils/hexToHsl.js","utils/hexToRgb.js","components/displayFormat.jsx","hooks/useGameSettings.js","hooks/useCreateCustomLvl.js","components/ColorGameControls.jsx","components/AppContainer.js","App.js","store/store.js","reportWebVitals.js","index.js"],"names":["hexGenerator","length","result","characters","charactersLength","i","charAt","Math","floor","random","generateGameColors","activeLvlBoxCount","newColors","Array","from","keys","map","trueColor","gameInProgress","createSlice","name","initialState","colors","score","attempts","activeLevel","allGenerated","maxPoints","reducers","setScore","state","action","payload","setTrueColor","setColors","attemptsIncrement","attemptsReset","setAllGenerated","setBoxesNumber","caseReducers","startNewGame","useHint","withoutTrueColor","filter","x","halfLength","halfSize","splice","concat","sort","actions","checkForRightColor","useGameInProgress","useSelector","useCheckRightColor","dispatch","useDispatch","checkColor","colorToCheck","alert","item","ColorGamePlayground","className","style","background","onClick","colorCheckHandler","nanoid","gameSettings","activeColorDisplayFormat","defaultLevels","label","boxesNumber","customLevels","setActiveColorDisplayFormat","setCustomLevels","push","deleteCustomLevels","ButtonComponent","props","Button","color","children","RadioBtns","prop","onChange","e","target","value","htmlFor","id","type","FormComponent","customLvlBoxes","customLvlName","onChangeName","onChangeBoxes","onSubmit","InputGroup","InputGroupAddon","addonType","InputGroupText","Input","hexToHsl","hex","exec","r","parseInt","g","b","h","s","max","min","l","d","round","hexToRgb","cutter","substring","match","newArray","hexBase","indexOf","join","displayFormat","colorFormat","display","useGameSettings","hintActive","initialBoxNumber","useCreateCustomLvl","useState","testLabel","setTestLabel","testBoxesNumber","setTestBoxesNumber","ColorGameControls","lvlHandler","window","localStorage","setItem","removeItem","radioBtnHandler","maxHeight","preventDefault","customLvlNameHandler","customLvlBoxesHandler","AppContainer","useEffect","getItem","App","configureStore","reducer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.e6344c33.chunk.js","sourcesContent":["const hexGenerator = length => {\n\tlet result = '#'\n\tconst characters = 'abcdef0123456789'\n\tconst charactersLength = characters.length\n\tfor (let i = 0; i < length; i++) {\n\t\tresult += characters.charAt(Math.floor(Math.random() * charactersLength))\n\t}\n\treturn result\n}\n\nexport default hexGenerator\n","import hexGenerator from '../utils/hexGenerator'\r\n\r\nconst generateGameColors = activeLvlBoxCount => {\r\n  const newColors = Array.from(Array(activeLvlBoxCount).keys()).map(() =>\r\n    hexGenerator(6)\r\n  )\r\n  const randomer = newColors[Math.floor(Math.random() * newColors.length)]\r\n\r\n  return { newColors, trueColor: randomer }\r\n}\r\n\r\nexport default generateGameColors\r\n","import { createSlice } from '@reduxjs/toolkit'\r\nimport generateGameColors from '../utils/generateGameColors'\r\n\r\nconst gameInProgress = createSlice({\r\n  name: 'gameInProgress',\r\n  initialState: {\r\n    trueColor: '',\r\n    colors: [],\r\n    score: 0,\r\n    attempts: 0,\r\n    activeLevel: 'easy',\r\n    allGenerated: true,\r\n    activeLvlBoxCount: 3,\r\n    maxPoints: 3,\r\n  },\r\n  reducers: {\r\n    setScore(state, action) {\r\n      state.score = action.payload\r\n    },\r\n    setTrueColor(state, action) {\r\n      state.trueColor = action.payload\r\n    },\r\n    setColors(state, action) {\r\n      state.colors = action.payload\r\n    },\r\n    attemptsIncrement(state) {\r\n      state.attempts++\r\n    },\r\n    attemptsReset(state) {\r\n      state.attempts = 0\r\n    },\r\n    setAllGenerated(state, action) {\r\n      state.allGenerated = action.payload\r\n    },\r\n    setBoxesNumber(state, action) {\r\n      gameInProgress.caseReducers.startNewGame(state, action.payload)\r\n      state.activeLvlBoxCount = action.payload\r\n      state.maxPoints = action.payload\r\n    },\r\n    startNewGame(state, action) {\r\n      const { newColors, trueColor } = generateGameColors(action)\r\n\r\n      state.trueColor = trueColor\r\n      state.colors = newColors\r\n      state.allGenerated = true\r\n    },\r\n    useHint(state) {\r\n      const withoutTrueColor = state.colors.filter(x => x !== state.trueColor)\r\n      const halfLength = Math.floor(withoutTrueColor.length / 2)\r\n      const halfSize = withoutTrueColor\r\n        .splice(0, halfLength)\r\n        .concat(state.trueColor)\r\n        .sort(() => (Math.random() > 0.5 ? 1 : -1))\r\n\r\n      state.attempts = 0\r\n      state.colors = halfSize\r\n      state.maxPoints = halfLength + 1\r\n    },\r\n  },\r\n})\r\n\r\nexport const setScore = gameInProgress.actions.setScore\r\nexport const setTrueColor = gameInProgress.actions.setTrueColor\r\nexport const setColors = gameInProgress.actions.setColors\r\nexport const setBoxesNumber = gameInProgress.actions.setBoxesNumber\r\nexport const attemptsIncrement = gameInProgress.actions.attemptsIncrement\r\nexport const attemptsReset = gameInProgress.actions.attemptsReset\r\nexport const setAllGenerated = gameInProgress.actions.setAllGenerated\r\nexport const startNewGame = gameInProgress.actions.startNewGame\r\nexport const useHint = gameInProgress.actions.useHint\r\nexport const checkForRightColor = gameInProgress.actions.checkForRightColor\r\n\r\nexport default gameInProgress\r\n","import { useSelector } from 'react-redux'\r\nimport {\r\n  setBoxesNumber,\r\n  setTrueColor,\r\n  setColors,\r\n  attemptsIncrement,\r\n  setScore,\r\n  attemptsReset,\r\n  setAllGenerated,\r\n  startNewGame,\r\n  useHint,\r\n  checkForRightColor,\r\n} from '../store/gameInProgress'\r\n\r\nconst useGameInProgress = () => {\r\n  const allGenerated = useSelector(state => state.gameInProgress.allGenerated)\r\n  const score = useSelector(state => state.gameInProgress.score)\r\n  const attempts = useSelector(state => state.gameInProgress.attempts)\r\n  const colors = useSelector(state => state.gameInProgress.colors)\r\n  const trueColor = useSelector(state => state.gameInProgress.trueColor)\r\n  const activeLevel = useSelector(state => state.gameInProgress.activeLevel)\r\n  const maxPoints = useSelector(state => state.gameInProgress.maxPoints)\r\n  const activeLvlBoxCount = useSelector(\r\n    state => state.gameInProgress.activeLvlBoxCount\r\n  )\r\n\r\n  return {\r\n    setBoxesNumber,\r\n    setTrueColor,\r\n    setColors,\r\n    attemptsIncrement,\r\n    setScore,\r\n    attemptsReset,\r\n    setAllGenerated,\r\n    allGenerated,\r\n    score,\r\n    attempts,\r\n    colors,\r\n    trueColor,\r\n    activeLevel,\r\n    startNewGame,\r\n    useHint,\r\n    maxPoints,\r\n    checkForRightColor,\r\n    activeLvlBoxCount,\r\n  }\r\n}\r\n\r\nexport default useGameInProgress\r\n","import { useDispatch } from 'react-redux'\r\nimport useGameInProgress from './useGameInProgress'\r\n\r\nconst useCheckRightColor = () => {\r\n  const dispatch = useDispatch()\r\n  const {\r\n    score,\r\n    attempts,\r\n    maxPoints,\r\n    trueColor,\r\n    activeLvlBoxCount,\r\n    colors,\r\n    attemptsIncrement,\r\n    setColors,\r\n    setScore,\r\n    attemptsReset,\r\n    setBoxesNumber,\r\n  } = useGameInProgress()\r\n\r\n  const checkColor = colorToCheck => {\r\n    if (colorToCheck === trueColor) {\r\n      alert(\r\n        `Good job! You get it after ${attempts + 1} attempts, and recive ${\r\n          maxPoints - attempts\r\n        } points!`\r\n      )\r\n      dispatch(setScore(score + maxPoints - attempts))\r\n      dispatch(setBoxesNumber(activeLvlBoxCount))\r\n      dispatch(attemptsReset())\r\n    } else {\r\n      dispatch(attemptsIncrement())\r\n      dispatch(setColors(colors.filter(item => colorToCheck !== item)))\r\n    }\r\n  }\r\n\r\n  return { checkColor }\r\n}\r\n\r\nexport default useCheckRightColor\r\n","import { nanoid } from 'nanoid'\r\nimport useCheckRightColor from '../hooks/useCheckRightColor'\r\nimport useGameInProgress from '../hooks/useGameInProgress'\r\n\r\nconst ColorGamePlayground = () => {\r\n  const {colors} = useGameInProgress()  \r\n  const {checkColor} = useCheckRightColor() \r\n\r\n  const colorCheckHandler = x => {\r\n    checkColor(x)\r\n  }\r\n\r\n  return (\r\n    <div className='d-flex flex-wrap justify-content-center align-items-center overflow-auto col-8 vh-100 p-3'>\r\n      <div className='d-flex flex-wrap justify-content-between align-items-center overflow-auto'>\r\n        {colors.map(x => (\r\n          <div key={nanoid()} className=''>\r\n            <button\r\n              className='p-5 m-1'\r\n              style={{ background: x }}\r\n              onClick={() => colorCheckHandler(x)}\r\n            />\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ColorGamePlayground\r\n","import { createSlice } from '@reduxjs/toolkit'\r\n\r\nconst gameSettings = createSlice({\r\n  name: 'gameSettings',\r\n  initialState: {\r\n    activeColorDisplayFormat: 'hex',\r\n    defaultLevels: [\r\n      { label: 'easy', boxesNumber: 3 },\r\n      { label: 'medium', boxesNumber: 6 },\r\n      { label: 'hard', boxesNumber: 9 },\r\n    ],\r\n    customLevels: [],\r\n  },\r\n  reducers: {\r\n    setActiveColorDisplayFormat(state, action) {\r\n      state.activeColorDisplayFormat = action.payload\r\n    },\r\n\r\n    setCustomLevels(state, action) {\r\n      state.customLevels.push(action.payload)\r\n    },\r\n    deleteCustomLevels(state) {\r\n      state.customLevels = []\r\n    },\r\n  },\r\n})\r\n\r\nexport const setActiveColorDisplayFormat =\r\n  gameSettings.actions.setActiveColorDisplayFormat\r\nexport const setCustomLevels = gameSettings.actions.setCustomLevels\r\nexport const deleteCustomLevels = gameSettings.actions.deleteCustomLevels\r\n\r\nexport default gameSettings\r\n","import { Button } from 'reactstrap'\n\nconst ButtonComponent = props => (\n  <Button\n    color={props.color}\n    onClick={() => props.onClick()}\n    className={props.className}\n  >\n    {props.children}\n  </Button>\n)\n\nexport default ButtonComponent\n","const RadioBtns = prop => {\r\n  return (\r\n    <div onChange={e => prop.onChange(e.target.value)}>\r\n      <div className='form-check form-check-inline'>\r\n        <label className='form-check-label' htmlFor='hex'>\r\n          HEX\r\n          <input\r\n            className='form-check-input'\r\n            id='hex'\r\n            type='radio'\r\n            value='hex'\r\n            name='color'\r\n          />\r\n        </label>\r\n      </div>\r\n      <div className='form-check form-check-inline'>\r\n        <label className='form-check-label' htmlFor='rgb'>\r\n          RGB\r\n          <input\r\n            className='form-check-input'\r\n            id='rgb'\r\n            type='radio'\r\n            value='rgb'\r\n            name='color'\r\n          />\r\n        </label>\r\n      </div>\r\n\r\n      <div className='form-check form-check-inline'>\r\n        <label className='form-check-label' htmlFor='hsl'>\r\n          HSL\r\n          <input\r\n            className='form-check-input'\r\n            id='hsl'\r\n            type='radio'\r\n            value='hsl'\r\n            name='color'\r\n          />\r\n        </label>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default RadioBtns\r\n","import {\r\n  Button,\r\n  InputGroup,\r\n  InputGroupAddon,\r\n  InputGroupText,\r\n  Input,\r\n} from 'reactstrap'\r\n\r\nconst FormComponent = prop => {\r\n  const {\r\n    customLvlBoxes,\r\n    customLvlName,\r\n    onChangeName,\r\n    onChangeBoxes,\r\n    onSubmit,\r\n  } = prop\r\n\r\n  return (\r\n    <div>\r\n      <form onSubmit={e => onSubmit(e)}>\r\n        <InputGroup className='my-2'>\r\n          <InputGroupAddon addonType='prepend'>\r\n            <InputGroupText>add custom lvl name:</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input\r\n            type='text'\r\n            name='lvl name'\r\n            value={customLvlName}\r\n            onChange={e => onChangeName(e.target.value)}\r\n          />\r\n        </InputGroup>\r\n        <InputGroup className='my-2'>\r\n          <InputGroupAddon addonType='prepend'>\r\n            <InputGroupText>add number of boxes:</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input\r\n            type='number'\r\n            name='lvls'\r\n            value={customLvlBoxes}\r\n            onChange={e => onChangeBoxes(e.target.value)}\r\n          />\r\n        </InputGroup>\r\n\r\n        <Button type='submit' color='success' className='m-2'>\r\n          add custom lvl\r\n        </Button>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default FormComponent\r\n","const hexToHsl = hex => {\r\n  var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex)\r\n\r\n  var r = parseInt(result[1], 16)\r\n  var g = parseInt(result[2], 16)\r\n  var b = parseInt(result[3], 16)\r\n\r\n  ;(r /= 255), (g /= 255), (b /= 255)\r\n  var max = Math.max(r, g, b),\r\n    min = Math.min(r, g, b)\r\n  var h,\r\n    s,\r\n    l = (max + min) / 2\r\n\r\n  if (max == min) {\r\n    h = s = 0 // achromatic\r\n  } else {\r\n    var d = max - min\r\n    s = l > 0.5 ? d / (2 - max - min) : d / (max + min)\r\n    switch (max) {\r\n      case r:\r\n        h = (g - b) / d + (g < b ? 6 : 0)\r\n        break\r\n      case g:\r\n        h = (b - r) / d + 2\r\n        break\r\n      case b:\r\n        h = (r - g) / d + 4\r\n        break\r\n    }\r\n    h /= 6\r\n  }\r\n\r\n  s = s * 100\r\n  s = Math.round(s)\r\n  l = l * 100\r\n  l = Math.round(l)\r\n  h = Math.round(360 * h)\r\n\r\n  const hsl = h + ', ' + s + '%, ' + l + '%'\r\n\r\n  return hsl\r\n}\r\n\r\nexport default hexToHsl\r\n","import { nanoid } from '@reduxjs/toolkit'\n\nconst hexToRgb = x => {\n  const cutter = x.substring(1).match(/.{1,2}/g)\n  const newArray = []\n\n  const hexBase = [\n    '0',\n    '1',\n    '2',\n    '3',\n    '4',\n    '5',\n    '6',\n    '7',\n    '8',\n    '9',\n    'a',\n    'b',\n    'c',\n    'd',\n    'e',\n    'f',\n  ]\n\n  for (let i = 0; i < cutter.length; i++) {\n    const value1 = hexBase.indexOf(cutter[i][0]) * 16\n    const value2 = hexBase.indexOf(cutter[i][1])\n    const result = value1 + value2\n    newArray.push(result)\n  }\n\n  return newArray.join(', ')\n}\n\nexport default hexToRgb\n","import { nanoid } from 'nanoid'\r\nimport hexToHsl from '../utils/hexToHsl'\r\nimport hexToRgb from '../utils/hexToRgb'\r\n\r\nconst displayFormat = (trueColor, activeColorDisplayFormat) => {\r\n  const getColorInFormat = (color, colorFormat) => {\r\n    if (colorFormat == 'hex') {\r\n      return color\r\n    } else if (colorFormat == 'rgb') {\r\n      return hexToRgb(color)\r\n    } else if (colorFormat == 'hsl') {\r\n      return hexToHsl(color)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <h2 key={nanoid()} style={{ display: 'inline' }}>\r\n      {getColorInFormat(trueColor, activeColorDisplayFormat)}\r\n    </h2>\r\n  )\r\n}\r\n\r\nexport default displayFormat\r\n","import { useSelector } from 'react-redux'\r\nimport { setCustomLevels, deleteCustomLevels } from '../store/gameSettings'\r\n\r\nconst useGameSettings = () => {\r\n  const defaultLevels = useSelector(state => state.gameSettings.defaultLevels)\r\n  const hintActive = useSelector(state => state.gameSettings.hintActive)\r\n  const customLevels = useSelector(state => state.gameSettings.customLevels)\r\n  const activeColorDisplayFormat = useSelector(\r\n    state => state.gameSettings.activeColorDisplayFormat\r\n  )\r\n  const initialBoxNumber = useSelector(\r\n    state => state.gameSettings.initialBoxNumber\r\n  )\r\n\r\n  return {\r\n    setCustomLevels,\r\n    deleteCustomLevels,\r\n    defaultLevels,\r\n    hintActive,\r\n    customLevels,\r\n    activeColorDisplayFormat,\r\n    initialBoxNumber,\r\n  }\r\n}\r\n\r\nexport default useGameSettings\r\n","import { useState } from 'react'\r\nimport useGameSettings from './useGameSettings'\r\n\r\nconst useCreateCustomLvl = () => {\r\n  const { setCustomLevels } = useGameSettings()\r\n  const [testLabel, setTestLabel] = useState('')\r\n  const [testBoxesNumber, setTestBoxesNumber] = useState('')\r\n\r\n  return {\r\n    testLabel,\r\n    setTestLabel,\r\n    testBoxesNumber,\r\n    setTestBoxesNumber,\r\n    setCustomLevels,\r\n  }\r\n}\r\n\r\nexport default useCreateCustomLvl\r\n","import { nanoid } from 'nanoid'\r\nimport { Button } from 'reactstrap'\r\nimport { useDispatch } from 'react-redux'\r\nimport { setActiveColorDisplayFormat } from '../store/gameSettings'\r\nimport ButtonComponent from '../common/ButtonComponent'\r\nimport RadioBtns from '../common/RadioBtns'\r\nimport FormComponent from './FormComponent'\r\nimport displayFormat from './displayFormat'\r\nimport useCreateCustomLvl from '../hooks/useCreateCustomLvl'\r\nimport useGameSettings from '../hooks/useGameSettings'\r\nimport useGameInProgress from '../hooks/useGameInProgress'\r\n\r\nconst ColorGameControls = () => {\r\n  const dispatch = useDispatch()\r\n\r\n  const {\r\n    defaultLevels,\r\n    customLevels,\r\n    activeColorDisplayFormat,\r\n    deleteCustomLevels,\r\n  } = useGameSettings()\r\n\r\n  const {\r\n    setBoxesNumber,\r\n    score,\r\n    trueColor,\r\n    useHint,\r\n    setScore,\r\n    activeLvlBoxCount,\r\n  } = useGameInProgress()\r\n\r\n  let {\r\n    testLabel,\r\n    setTestLabel,\r\n    testBoxesNumber,\r\n    setTestBoxesNumber,\r\n    setCustomLevels,\r\n  } = useCreateCustomLvl()\r\n\r\n  const radioBtnHandler = prop => {\r\n    dispatch(setActiveColorDisplayFormat(prop))\r\n  }\r\n\r\n  const customLvlBoxesHandler = prop => {\r\n    setTestBoxesNumber(prop)\r\n  }\r\n\r\n  const customLvlNameHandler = prop => {\r\n    setTestLabel(prop)\r\n  }\r\n\r\n  const deleteCustomLvlsHandler = () => {\r\n    dispatch(deleteCustomLevels())\r\n  }\r\n\r\n  const formSubmissionHandler = e => {\r\n    e.preventDefault()\r\n    if (testLabel === '' && testBoxesNumber === '') {\r\n      alert('Please, fill all fields!')\r\n    } else {\r\n      setTestLabel('')\r\n      setTestBoxesNumber('')\r\n      const addLvl = {\r\n        label: testLabel,\r\n        boxesNumber: +testBoxesNumber,\r\n      }\r\n\r\n      dispatch(setCustomLevels(addLvl))\r\n    }\r\n  }\r\n\r\n  const saveScore = () => {\r\n    window.localStorage.setItem('score', score)\r\n  }\r\n  const resetScore = () => {\r\n    dispatch(setScore(0))\r\n    window.localStorage.removeItem('score')\r\n  }\r\n\r\n  const lvlHandler = boxesNumber => {\r\n    dispatch(setBoxesNumber(boxesNumber))\r\n  }\r\n\r\n  const hintHandler = () => {\r\n    dispatch(useHint())\r\n  }\r\n\r\n  return (\r\n    <div className='col-4 vh-100'>\r\n      <div className='d-flex justify-content-between border-bottom border-dark my-3 pb-3'>\r\n        <h2>score: {score}</h2>\r\n        <ButtonComponent onClick={() => saveScore()} color='success'>\r\n          save score\r\n        </ButtonComponent>\r\n        <ButtonComponent onClick={() => resetScore()} color='danger'>\r\n          reset score\r\n        </ButtonComponent>\r\n      </div>\r\n\r\n      <div className='border-bottom border-dark'>\r\n        <h3>Guess the color?</h3>\r\n        {displayFormat(trueColor, activeColorDisplayFormat)}\r\n\r\n        <RadioBtns onChange={prop => radioBtnHandler(prop)} />\r\n      </div>\r\n\r\n      <div className='border-bottom border-dark my-3'>\r\n        <div className='d-flex justify-content-between border-bottom border-dark pb-3'>\r\n          {defaultLevels.map(x => (\r\n            <Button\r\n              key={nanoid()}\r\n              onClick={() => lvlHandler(x.boxesNumber)}\r\n              color='success'\r\n              className='mx-1'\r\n            >\r\n              {x.label}\r\n            </Button>\r\n          ))}\r\n          <ButtonComponent\r\n            onClick={() => lvlHandler(activeLvlBoxCount)}\r\n            color='danger'\r\n          >\r\n            RESET LVL\r\n          </ButtonComponent>\r\n        </div>\r\n\r\n        <div className='overflow-auto my-3' style={{ maxHeight: '20vh' }}>\r\n          <h5>Custom levels:</h5>\r\n          {customLevels.map(x => (\r\n            <Button\r\n              key={nanoid()}\r\n              id={nanoid()}\r\n              onClick={() => lvlHandler(x.boxesNumber)}\r\n              color='success'\r\n              className='m-2'\r\n            >\r\n              {x.label}\r\n            </Button>\r\n          ))}\r\n        </div>\r\n\r\n        <FormComponent\r\n          onSubmit={prop => formSubmissionHandler(prop)}\r\n          onChangeName={prop => customLvlNameHandler(prop)}\r\n          onChangeBoxes={prop => customLvlBoxesHandler(prop)}\r\n          customLvlName={testLabel}\r\n          customLvlBoxes={testBoxesNumber}\r\n        />\r\n\r\n        <Button\r\n          onClick={() => deleteCustomLvlsHandler()}\r\n          type='btn'\r\n          color='danger'\r\n          className='m-2'\r\n        >\r\n          delete custom levels\r\n        </Button>\r\n      </div>\r\n\r\n      <Button color='primary' onClick={() => hintHandler()}>\r\n        NEED HELP?\r\n      </Button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ColorGameControls\r\n","import { useEffect } from 'react'\r\nimport ColorGamePlayground from './ColorGamePlayground'\r\nimport ColorGameControls from './ColorGameControls'\r\nimport { useDispatch } from 'react-redux'\r\nimport useGameInProgress from '../hooks/useGameInProgress'\r\n\r\nconst AppContainer = () => {\r\n  const dispatch = useDispatch()\r\n\r\n  const { activeLvlBoxCount, setScore, allGenerated, setBoxesNumber } =\r\n    useGameInProgress()\r\n\r\n  useEffect(() => {\r\n    dispatch(setBoxesNumber(activeLvlBoxCount))\r\n    dispatch(setScore(+window.localStorage.getItem('score')))\r\n  }, [])\r\n\r\n  return (\r\n    <div>\r\n      {!allGenerated ? (\r\n        <h1>Generating data...</h1>\r\n      ) : (\r\n        <div className='d-flex container'>\r\n          <ColorGameControls />\r\n          <ColorGamePlayground />\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AppContainer\r\n","import './App.css'\r\nimport AppContainer from './components/AppContainer'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className='App'>\r\n      <AppContainer />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport gameInProgress from './gameInProgress'\r\nimport gameSettings from './gameSettings'\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    gameInProgress: gameInProgress.reducer,\r\n    gameSettings: gameSettings.reducer,\r\n  },\r\n})\r\n","const reportWebVitals = onPerfEntry => {\n\tif (onPerfEntry && onPerfEntry instanceof Function) {\n\t\timport('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n\t\t\tgetCLS(onPerfEntry)\n\t\t\tgetFID(onPerfEntry)\n\t\t\tgetFCP(onPerfEntry)\n\t\t\tgetLCP(onPerfEntry)\n\t\t\tgetTTFB(onPerfEntry)\n\t\t})\n\t}\n}\n\nexport default reportWebVitals\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport store from './store/store'\r\nimport { Provider } from 'react-redux'\r\nimport reportWebVitals from './reportWebVitals'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport './index.css'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n"],"sourceRoot":""}