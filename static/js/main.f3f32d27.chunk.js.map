{"version":3,"sources":["components/ButtonComponent.js","components/ColorBoxes.js","components/HexGenerator.js","components/HexToRgb.js","components/MainVisual.js","App.js","reportWebVitals.js","index.js"],"names":["ButtonComponent","props","Button","color","onClick","className","children","ColorBoxes","score","onSaveScore","onResetScore","background","map","x","style","onCheckColor","nanoid","hexGenerator","length","result","characters","charactersLength","i","charAt","Math","floor","random","hexToRgb","newArray","hexBase","cutter","substring","match","indexOf","push","MainVisual","useState","boxesNumber","setBoxesNumber","scoreCounter","setScoreCounter","setColors","trueColor","setTrueColor","isHex","setIsHex","setScore","reducedBoxesList","setReducedBoxesList","lvlButton","customLvlName","setCustomLvlName","customLvlBoxes","setCustomLvlBoxes","customLvl","setCustomLvl","useEffect","getNewColors","window","localStorage","getItem","newColors","Array","from","keys","randomer","lvlHandler","prop","resetHandler","lvlNumBoxes","lvlName","onSubmit","e","preventDefault","addLvl","prevState","InputGroup","InputGroupAddon","addonType","InputGroupText","Input","type","name","value","onChange","target","alert","updatedList","filter","item","removeItem","setItem","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f3f32d27.chunk.js","sourcesContent":["import { Button } from 'reactstrap';\r\n\r\nconst ButtonComponent = props => {\r\n  return (\r\n    <Button\r\n      color={props.color}\r\n      onClick={() => props.onClick()}\r\n      className={props.className}\r\n    >\r\n      {props.children}\r\n    </Button>\r\n  );\r\n};\r\n\r\nexport default ButtonComponent;\r\n","import { nanoid } from 'nanoid';\r\nimport ButtonComponent from './ButtonComponent';\r\n\r\nconst ColorBoxes = props => {\r\n  return (\r\n    <div>\r\n      <div className=\"d-flex justify-content-between my-3\">\r\n        <h2>score: {props.score}</h2>\r\n        <ButtonComponent onClick={props.onSaveScore} color=\"success\">\r\n          save score\r\n        </ButtonComponent>\r\n        <ButtonComponent onClick={props.onResetScore} color=\"danger\">\r\n          reset score\r\n        </ButtonComponent>\r\n      </div>\r\n      <div className=\"d-flex flex-wrap justify-content-between\">\r\n        {props.background.map(x => (\r\n          <div key={nanoid()} className=\"col-4\">\r\n            <button\r\n              className=\"box p-5 my-3\"\r\n              style={{ background: x }}\r\n              onClick={() => props.onCheckColor(x)}\r\n            ></button>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ColorBoxes;\r\n","const hexGenerator = length => {\r\n  var result = '#';\r\n  var characters = 'abcdef0123456789';\r\n  var charactersLength = characters.length;\r\n  for (let i = 0; i < length; i++) {\r\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\r\n  }\r\n  return result;\r\n};\r\n\r\nexport default hexGenerator;\r\n","const hexToRgb = x => {\r\n  const newArray = [];\r\n\r\n  const hexBase = [\r\n    '0',\r\n    '1',\r\n    '2',\r\n    '3',\r\n    '4',\r\n    '5',\r\n    '6',\r\n    '7',\r\n    '8',\r\n    '9',\r\n    'a',\r\n    'b',\r\n    'c',\r\n    'd',\r\n    'e',\r\n    'f',\r\n  ];\r\n  const cutter = x.substring(1).match(/.{1,2}/g);\r\n  for (let i = 0; i < cutter.length; i++) {\r\n    const value1 = hexBase.indexOf(cutter[i][0]) * 16;\r\n    const value2 = hexBase.indexOf(cutter[i][1]);\r\n    const result = value1 + value2 + ', ';\r\n    newArray.push(result);\r\n  }\r\n\r\n  return newArray;\r\n};\r\n\r\nexport default hexToRgb;\r\n","import { useState, useEffect } from 'react';\r\nimport ButtonComponent from './ButtonComponent';\r\nimport ColorBoxes from './ColorBoxes';\r\nimport hexGenerator from './HexGenerator';\r\nimport hexToRgb from './HexToRgb';\r\nimport {\r\n  Button,\r\n  InputGroup,\r\n  InputGroupAddon,\r\n  InputGroupText,\r\n  Input,\r\n} from 'reactstrap';\r\n\r\nconst MainVisual = () => {\r\n  const [boxesNumber, setBoxesNumber] = useState(3);\r\n  const [scoreCounter, setScoreCounter] = useState(1);\r\n  const [colors, setColors] = useState([]);\r\n  const [trueColor, setTrueColor] = useState('');\r\n  const [isHex, setIsHex] = useState(true);\r\n  const [score, setScore] = useState(0);\r\n  const [reducedBoxesList, setReducedBoxesList] = useState([]);\r\n  const [lvlButton, setLvlButton] = useState([1, 2, 3, 4, 5]);\r\n  const [customLvlName, setCustomLvlName] = useState('');\r\n  const [customLvlBoxes, setCustomLvlBoxes] = useState('');\r\n  const [customLvl, setCustomLvl] = useState([]);\r\n\r\n  useEffect(() => {\r\n    getNewColors();\r\n    setScore(+window.localStorage.getItem('score'));\r\n  }, [boxesNumber]);\r\n\r\n  const getNewColors = () => {\r\n    const newColors = Array.from(Array(boxesNumber).keys()).map(() =>\r\n      hexGenerator(6)\r\n    );\r\n\r\n    const randomer = newColors[Math.floor(Math.random() * newColors.length)];\r\n    setTrueColor(randomer);\r\n    setColors(newColors);\r\n    setReducedBoxesList(newColors);\r\n  };\r\n\r\n  const lvlHandler = prop => {\r\n    setBoxesNumber(prop);\r\n  };\r\n\r\n  const resetHandler = () => {\r\n    getNewColors();\r\n  };\r\n\r\n  const checkColorHandler = x => {\r\n    if (x === trueColor) {\r\n      alert(\r\n        `Good job! You get it after ${scoreCounter} attempts, and recive ${\r\n          boxesNumber - scoreCounter + 1\r\n        } points!`\r\n      );\r\n      setScoreCounter(1);\r\n      setScore(score + boxesNumber - scoreCounter + 1);\r\n      resetHandler();\r\n    } else {\r\n      const updatedList = reducedBoxesList.filter(item => x !== item);\r\n      setReducedBoxesList(updatedList);\r\n      setScoreCounter(scoreCounter + 1);\r\n    }\r\n  };\r\n\r\n  const colorToggler = () => {\r\n    setIsHex(!isHex);\r\n  };\r\n\r\n  const resetScore = () => {\r\n    setScore(0);\r\n    window.localStorage.removeItem('score');\r\n  };\r\n\r\n  const saveScore = () => {\r\n    window.localStorage.setItem('score', score);\r\n  };\r\n\r\n  const customLvlHandler = e => {\r\n    setCustomLvlBoxes(e.target.value);\r\n  };\r\n\r\n  const customLvlNameHandler = e => {\r\n    setCustomLvlName(e.target.value);\r\n  };\r\n\r\n  const formSubmissionHandler = e => {\r\n    e.preventDefault();\r\n    // lvlHandler(+customLvl);\r\n    // getNewColors();\r\n    setCustomLvlBoxes('');\r\n    setCustomLvlName('');\r\n    const addLvl = {\r\n      lvlName: customLvlName,\r\n      lvlNumBoxes: +customLvlBoxes,\r\n    };\r\n\r\n    setCustomLvl(prevState => [addLvl, ...prevState]);\r\n  };\r\n\r\n  const deleteCustomLvlsHandler = () => {\r\n    setCustomLvl([]);\r\n  };\r\n\r\n  return (\r\n    <div className=\"container d-flex flex-column mt-5 col-xl-4 col-lg-6\">\r\n      <div className=\"border-bottom border-dark mb-3\">\r\n        <h3>Guess the color?</h3>\r\n        {isHex ? (\r\n          <h3>hex: {trueColor}</h3>\r\n        ) : (\r\n          <h3>rgb: {hexToRgb(trueColor)}</h3>\r\n        )}\r\n        <ButtonComponent\r\n          onClick={() => colorToggler()}\r\n          color=\"primary\"\r\n          className=\"my-3\"\r\n        >\r\n          {isHex ? 'convert to RGB' : 'convert to HEX'}\r\n        </ButtonComponent>\r\n      </div>\r\n\r\n      <div className=\"border-bottom border-dark\">\r\n        <div className=\"d-flex justify-content-between mb-3 border-bottom border-dark pb-3\">\r\n          {lvlButton.map(x => (\r\n            <Button onClick={() => lvlHandler(x * 3)} color=\"success\">\r\n              lvl {x}\r\n            </Button>\r\n          ))}\r\n\r\n          <ButtonComponent onClick={() => resetHandler()} color=\"danger\">\r\n            RESET LVL\r\n          </ButtonComponent>\r\n        </div>\r\n\r\n        <div>\r\n          <h5>Custom levels:</h5>\r\n          {customLvl.map(x => (\r\n            <Button\r\n              onClick={() => lvlHandler(x.lvlNumBoxes)}\r\n              color=\"success\"\r\n              className=\"m-2\"\r\n            >\r\n              {x.lvlName}\r\n            </Button>\r\n          ))}\r\n        </div>\r\n\r\n        <form onSubmit={formSubmissionHandler}>\r\n          <InputGroup className=\"py-1\">\r\n            <InputGroupAddon addonType=\"prepend\" className=\"w-50\">\r\n              <InputGroupText>add custom lvl name:</InputGroupText>\r\n            </InputGroupAddon>\r\n            <Input\r\n              type=\"text\"\r\n              name=\"lvl name\"\r\n              value={customLvlName}\r\n              onChange={customLvlNameHandler}\r\n            />\r\n            <InputGroupAddon addonType=\"prepend\" className=\"w-50\">\r\n              <InputGroupText>add number of boxes:</InputGroupText>\r\n            </InputGroupAddon>\r\n            <Input\r\n              type=\"number\"\r\n              name=\"lvls\"\r\n              value={customLvlBoxes}\r\n              onChange={customLvlHandler}\r\n            />\r\n          </InputGroup>\r\n\r\n          <Button type=\"submit\" color=\"success\" className=\"m-2\">\r\n            add custom lvl\r\n          </Button>\r\n          <Button\r\n            onClick={() => deleteCustomLvlsHandler()}\r\n            type=\"btn\"\r\n            color=\"danger\"\r\n            className=\"m-2\"\r\n          >\r\n            delete custom levels\r\n          </Button>\r\n        </form>\r\n      </div>\r\n      <ColorBoxes\r\n        onCheckColor={checkColorHandler}\r\n        onResetScore={() => resetScore()}\r\n        onSaveScore={() => saveScore()}\r\n        background={reducedBoxesList}\r\n        trueColor={trueColor}\r\n        score={score}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MainVisual;\r\n","import './App.css';\nimport MainVisual from './components/MainVisual';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainVisual />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}