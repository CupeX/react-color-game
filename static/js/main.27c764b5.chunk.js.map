{"version":3,"sources":["components/ButtonComponent.js","components/colorBoxes.js","components/mainVisual.js","App.js","reportWebVitals.js","index.js"],"names":["ButtonComponent","props","Button","color","onClick","children","ColorBoxes","resetLvl","background","boxes","useState","newList","setNewList","counter","setCounter","score","setScore","trueColor","useEffect","window","localStorage","getItem","className","setItem","removeItem","map","x","style","alert","updatedList","filter","item","colorChecker","nanoid","MainVisual","colors","setColors","setTrueColor","getNewColors","newColors","Array","from","keys","length","result","characters","charactersLength","i","charAt","Math","floor","random","hexGen","randomer","lvlHandler","prop","resetHandler","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.27c764b5.chunk.js","sourcesContent":["import { Button } from 'reactstrap';\r\n\r\nconst ButtonComponent = props => {\r\n  return (\r\n    <Button color={props.color} onClick={() => props.onClick()}>\r\n      {props.children}\r\n    </Button>\r\n  );\r\n};\r\n\r\nexport default ButtonComponent;\r\n","import { nanoid } from 'nanoid';\r\nimport { useEffect, useState } from 'react';\r\nimport ButtonComponent from './ButtonComponent';\r\n\r\nconst ColorBoxes = props => {\r\n  const resetLvl = props.resetLvl;\r\n  const background = props.background;\r\n  const boxes = props.boxes;\r\n  const [newList, setNewList] = useState([]);\r\n  const [counter, setCounter] = useState(1);\r\n  const [score, setScore] = useState(0);\r\n  const trueColor = props.trueColor;\r\n\r\n  useEffect(() => {\r\n    setScore(+window.localStorage.getItem('score'));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setNewList(background);\r\n  }, [background]);\r\n\r\n  const colorChecker = x => {\r\n    if (x === trueColor) {\r\n      alert(\r\n        `Good job! You get it after ${counter} attempts, and recive ${\r\n          boxes - counter + 1\r\n        } points!`\r\n      );\r\n      setCounter(1);\r\n      setScore(score + boxes - counter + 1);\r\n      resetLvl();\r\n    } else {\r\n      const updatedList = newList.filter(item => x !== item);\r\n      setNewList(updatedList);\r\n      setCounter(counter + 1);\r\n    }\r\n  };\r\n\r\n  const resetScore = () => {\r\n    setScore(0);\r\n    window.localStorage.removeItem('score');\r\n  };\r\n\r\n  const saveData = () => {\r\n    window.localStorage.setItem('score', score);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"d-flex justify-content-between my-3\">\r\n        <h2>score: {score}</h2>\r\n        <ButtonComponent onClick={saveData} color=\"success\">\r\n          save score\r\n        </ButtonComponent>\r\n        <ButtonComponent onClick={resetScore} color=\"danger\">\r\n          reset score\r\n        </ButtonComponent>\r\n      </div>\r\n      <div className=\"d-flex flex-wrap justify-content-between\">\r\n        {newList.map(x => (\r\n          <div key={nanoid()} className=\"col-4\">\r\n            <button\r\n              className=\"box p-5 my-3\"\r\n              style={{ background: x }}\r\n              onClick={() => colorChecker(x)}\r\n            ></button>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ColorBoxes;\r\n","import { useState, useEffect } from 'react';\r\nimport ButtonComponent from './ButtonComponent';\r\nimport ColorBoxes from './colorBoxes';\r\n\r\nconst hexGen = length => {\r\n  var result = '#';\r\n  var characters = 'abcdef0123456789';\r\n  var charactersLength = characters.length;\r\n  for (let i = 0; i < length; i++) {\r\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\r\n  }\r\n  return result;\r\n};\r\n\r\nconst MainVisual = () => {\r\n  const [counter, setCounter] = useState(3);\r\n  const [colors, setColors] = useState([]);\r\n  const [trueColor, setTrueColor] = useState('');\r\n\r\n  useEffect(() => {\r\n    getNewColors();\r\n  }, [counter]);\r\n\r\n  const getNewColors = () => {\r\n    const newColors = Array.from(Array(counter).keys()).map(() => hexGen(6));\r\n\r\n    const randomer = newColors[Math.floor(Math.random() * newColors.length)];\r\n    setTrueColor(randomer);\r\n    setColors(newColors);\r\n  };\r\n\r\n  const lvlHandler = prop => {\r\n    setCounter(prop);\r\n  };\r\n\r\n  const resetHandler = () => {\r\n    getNewColors();\r\n  };\r\n\r\n  return (\r\n    <div className=\"container d-flex flex-column mt-5 col-xl-4 col-lg-6\">\r\n      <h3>Guess the color: {trueColor}</h3>\r\n      <div className=\"d-flex justify-content-between border-bottom border-dark pb-3\">\r\n        <ButtonComponent onClick={() => lvlHandler(3)} color=\"success\">\r\n          lvl 1\r\n        </ButtonComponent>\r\n        <ButtonComponent onClick={() => lvlHandler(6)} color=\"success\">\r\n          lvl 2\r\n        </ButtonComponent>\r\n        <ButtonComponent onClick={() => lvlHandler(9)} color=\"success\">\r\n          lvl 3\r\n        </ButtonComponent>\r\n\r\n        <ButtonComponent onClick={() => resetHandler()} color=\"danger\">\r\n          RESET LVL\r\n        </ButtonComponent>\r\n      </div>\r\n      <ColorBoxes\r\n        resetLvl={() => resetHandler()}\r\n        boxes={counter}\r\n        background={colors}\r\n        trueColor={trueColor}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MainVisual;\r\n","import './App.css';\nimport MainVisual from './components/mainVisual';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainVisual />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}