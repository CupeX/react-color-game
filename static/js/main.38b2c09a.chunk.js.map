{"version":3,"sources":["components/ColorGamePlayground.jsx","components/ButtonComponent.jsx","components/HexToRgb.js","components/RgbToHsl.js","components/ColorGameControls.jsx","components/HexGenerator.js","components/AppContainer.js","App.js","reportWebVitals.js","index.js"],"names":["ColorGamePlayground","props","className","customWidth","background","map","x","style","onClick","onCheckColor","nanoid","ButtonComponent","Button","color","children","hexToRgb","cutter","substring","match","newArray","hexBase","i","length","result","indexOf","push","rgbToHsl","r","g","b","max","Math","min","h","s","l","d","round","ColorGameControls","useState","colorOption","setColorOption","score","trueColor","customLvl","customLvlName","customLvlBoxes","onSaveScore","onResetScore","rgb","display","hsl","content","onChange","e","target","value","id","type","name","htmlFor","lvlButton","onLvlHandler","onResetHandler","maxHeight","lvlNumBoxes","lvlName","onSubmit","onFormSubmissionHandler","InputGroup","InputGroupAddon","addonType","InputGroupText","Input","onCustomLvlNameHandler","onCustomLvlHandler","onDeleteCustomLvlsHandler","onHint","hexGenerator","characters","charactersLength","charAt","floor","random","AppContainer","boxesNumber","setBoxesNumber","scoreCounter","setScoreCounter","colors","setColors","setTrueColor","isHex","setIsHex","setScore","reducedBoxesList","setReducedBoxesList","setCustomLvlName","setCustomLvlBoxes","setCustomLvl","allGenerated","setAllGenerated","getNewColors","newColors","Array","from","keys","randomer","useEffect","window","localStorage","getItem","resetHandler","withoutTrueColor","filter","halfLength","halfSize","splice","concat","hintHandler","setItem","removeItem","onColorToggler","prop","lvlHandler","customLvlHandler","customLvlNameHandler","preventDefault","alert","addLvl","prevState","formSubmissionHandler","updatedList","item","boxes","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.38b2c09a.chunk.js","sourcesContent":["import { nanoid } from 'nanoid'\n\nconst ColorGamePlayground = props => {\n  const customWidth = () => {\n    // if (props.boxes < 19) {\n    //   return 'col-6';\n    // } else if (props.boxes >= 19 && props.boxes < 31) {\n    //   return 'col-8';\n    // } else if (props.boxes >= 31 && props.boxes < 37) {\n    //   return 'col-10';\n    // } else {\n    //   return 'col-12';\n    // }\n  }\n\n  return (\n    <div className='d-flex flex-wrap justify-content-center align-items-center overflow-auto col-8 vh-100 p-3'>\n      <div\n        className={`d-flex flex-wrap justify-content-between align-items-center overflow-auto ${customWidth()}`}\n      >\n        {props.background.map(x => (\n          <div key={nanoid()} className=''>\n            <button\n              className='p-5 m-1'\n              style={{ background: x }}\n              onClick={() => props.onCheckColor(x)}\n            />\n          </div>\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default ColorGamePlayground\n","import { Button } from 'reactstrap'\n\nconst ButtonComponent = props => (\n  <Button\n    color={props.color}\n    onClick={() => props.onClick()}\n    className={props.className}\n  >\n    {props.children}\n  </Button>\n)\n\nexport default ButtonComponent\n","const hexToRgb = x => {\n  const cutter = x.substring(1).match(/.{1,2}/g)\n  const newArray = []\n\n  const hexBase = [\n    '0',\n    '1',\n    '2',\n    '3',\n    '4',\n    '5',\n    '6',\n    '7',\n    '8',\n    '9',\n    'a',\n    'b',\n    'c',\n    'd',\n    'e',\n    'f',\n  ]\n\n  for (let i = 0; i < cutter.length; i++) {\n    const value1 = hexBase.indexOf(cutter[i][0]) * 16\n    const value2 = hexBase.indexOf(cutter[i][1])\n    const result = value1 + value2\n    newArray.push(result)\n  }\n\n  return newArray\n}\n\nexport default hexToRgb\n","const rgbToHsl = (r, g, b) => {\r\n  ;(r /= 255), (g /= 255), (b /= 255)\r\n\r\n  const max = Math.max(r, g, b)\r\n  const min = Math.min(r, g, b)\r\n  let h = (max + min) / 2\r\n  let s = (max + min) / 2\r\n  const l = (max + min) / 2\r\n\r\n  if (max == min) {\r\n    h = s = 0\r\n  } else {\r\n    const d = max - min\r\n    s = l > 0.5 ? d / (2 - max - min) : d / (max + min)\r\n\r\n    switch (max) {\r\n      case r:\r\n        h = (g - b) / d + (g < b ? 6 : 0)\r\n        break\r\n      case g:\r\n        h = (b - r) / d + 2\r\n        break\r\n      case b:\r\n        h = (r - g) / d + 4\r\n        break\r\n    }\r\n\r\n    h /= 6\r\n  }\r\n\r\n  return [Math.round(h * 360), Math.round(s * 100), Math.round(l * 100)]\r\n}\r\n\r\nexport default rgbToHsl\r\n","import { useState } from 'react'\nimport { nanoid } from 'nanoid'\nimport {\n  Button,\n  InputGroup,\n  InputGroupAddon,\n  InputGroupText,\n  Input,\n} from 'reactstrap'\nimport ButtonComponent from './ButtonComponent'\nimport hexToRgb from './HexToRgb'\nimport rgbToHsl from './RgbToHsl'\n\nconst ColorGameControls = props => {\n  const [colorOption, setColorOption] = useState('hex')\n\n  const { score } = props\n  const { trueColor } = props\n  const { customLvl } = props\n  const { customLvlName } = props\n  const { customLvlBoxes } = props\n\n  const radioBtnHandler = e => {\n    setColorOption(e.target.value)\n  }\n\n  const content = colorOption => {\n    const rgb = hexToRgb(trueColor).map(x => (\n      <h2 key={nanoid()} style={{ display: 'inline' }}>\n        {x},\n      </h2>\n    ))\n    const hsl = rgbToHsl(...hexToRgb(trueColor)).map(x => (\n      <h2 key={nanoid()} style={{ display: 'inline' }}>\n        {x},\n      </h2>\n    ))\n\n    if (colorOption == 'hex') {\n      return <h2 style={{ display: 'inline' }}>{trueColor}</h2>\n    } else if (colorOption == 'rgb') {\n      return <div>{rgb}</div>\n    } else if (colorOption == 'hsl') {\n      return <div>{hsl}</div>\n    }\n  }\n\n  return (\n    <div className='col-4 vh-100'>\n      <div className='d-flex justify-content-between border-bottom border-dark my-3 pb-3'>\n        <h2>score: {score}</h2>\n        <ButtonComponent onClick={() => props.onSaveScore()} color='success'>\n          save score\n        </ButtonComponent>\n        <ButtonComponent onClick={() => props.onResetScore()} color='danger'>\n          reset score\n        </ButtonComponent>\n      </div>\n      <div className='border-bottom border-dark'>\n        <h3>Guess the color?</h3>\n        {content(colorOption)}\n\n        <div onChange={radioBtnHandler}>\n          <div className='form-check form-check-inline'>\n            <input\n              className='form-check-input'\n              id='hex'\n              type='radio'\n              value='hex'\n              name='color'\n            />\n            <label className='form-check-label' htmlFor='hex'>\n              HEX\n            </label>\n          </div>\n          <div className='form-check form-check-inline'>\n            <input\n              className='form-check-input'\n              id='rgb'\n              type='radio'\n              value='rgb'\n              name='color'\n            />\n            <label className='form-check-label' htmlFor='rgb'>\n              RGB\n            </label>\n          </div>\n\n          <div className='form-check form-check-inline'>\n            <input\n              className='form-check-input'\n              id='hsl'\n              type='radio'\n              value='hsl'\n              name='color'\n            />\n            <label className='form-check-label' htmlFor='hsl'>\n              HSL\n            </label>\n          </div>\n        </div>\n      </div>\n\n      <div className='border-bottom border-dark my-3'>\n        <div className='d-flex justify-content-between border-bottom border-dark pb-3'>\n          {props.lvlButton.map(x => (\n            <Button\n              key={nanoid()}\n              onClick={() => props.onLvlHandler(x * 3)}\n              color='success'\n              className='mx-1'\n            >\n              lvl {x}\n            </Button>\n          ))}\n\n          <ButtonComponent\n            onClick={() => props.onResetHandler()}\n            color='danger'\n          >\n            RESET LVL\n          </ButtonComponent>\n        </div>\n\n        <div className='overflow-auto my-3' style={{ maxHeight: '20vh' }}>\n          <h5>Custom levels:</h5>\n          {customLvl.map(x => (\n            <Button\n              id={nanoid()}\n              onClick={() => props.onLvlHandler(x.lvlNumBoxes)}\n              color='success'\n              className='m-2'\n            >\n              {x.lvlName}\n            </Button>\n          ))}\n        </div>\n\n        <form onSubmit={e => props.onFormSubmissionHandler(e)}>\n          <InputGroup className='my-2'>\n            <InputGroupAddon addonType='prepend'>\n              <InputGroupText>add custom lvl name:</InputGroupText>\n            </InputGroupAddon>\n            <Input\n              type='text'\n              name='lvl name'\n              value={customLvlName}\n              onChange={e => props.onCustomLvlNameHandler(e.target.value)}\n            />\n          </InputGroup>\n          <InputGroup className='my-2'>\n            <InputGroupAddon addonType='prepend'>\n              <InputGroupText>add number of boxes:</InputGroupText>\n            </InputGroupAddon>\n            <Input\n              type='number'\n              name='lvls'\n              value={customLvlBoxes}\n              onChange={e => props.onCustomLvlHandler(e.target.value)}\n            />\n          </InputGroup>\n\n          <Button type='submit' color='success' className='m-2'>\n            add custom lvl\n          </Button>\n        </form>\n        <Button\n          onClick={() => props.onDeleteCustomLvlsHandler()}\n          type='btn'\n          color='danger'\n          className='m-2'\n        >\n          delete custom levels\n        </Button>\n      </div>\n\n      <Button color='primary' onClick={() => props.onHint()}>\n        NEED HELP?\n      </Button>\n    </div>\n  )\n}\n\nexport default ColorGameControls\n","const hexGenerator = length => {\n\tlet result = '#'\n\tconst characters = 'abcdef0123456789'\n\tconst charactersLength = characters.length\n\tfor (let i = 0; i < length; i++) {\n\t\tresult += characters.charAt(Math.floor(Math.random() * charactersLength))\n\t}\n\treturn result\n}\n\nexport default hexGenerator\n","import { useState, useEffect } from 'react'\nimport ColorGamePlayground from './ColorGamePlayground'\nimport ColorGameControls from './ColorGameControls'\nimport hexGenerator from './HexGenerator'\nimport rgbToHsl from './RgbToHsl'\n\nconst AppContainer = () => {\n  const [boxesNumber, setBoxesNumber] = useState(3)\n  const [scoreCounter, setScoreCounter] = useState(1)\n  const [colors, setColors] = useState([])\n  const [trueColor, setTrueColor] = useState('')\n  const [isHex, setIsHex] = useState(true)\n  const [score, setScore] = useState(0)\n  const [reducedBoxesList, setReducedBoxesList] = useState([])\n  const [lvlButton, setLvlButton] = useState([1, 2, 3, 4, 5])\n  const [customLvlName, setCustomLvlName] = useState('')\n  const [customLvlBoxes, setCustomLvlBoxes] = useState('')\n  const [customLvl, setCustomLvl] = useState([])\n  const [allGenerated, setAllGenerated] = useState(false)\n\n  const getNewColors = () => {\n    const newColors = Array.from(Array(boxesNumber).keys()).map(() =>\n      hexGenerator(6)\n    )\n\n    const randomer = newColors[Math.floor(Math.random() * newColors.length)]\n    setTrueColor(randomer)\n    setColors(newColors)\n    setReducedBoxesList(newColors)\n    setAllGenerated(true)\n  }\n\n  useEffect(() => {\n    getNewColors()\n    setScore(+window.localStorage.getItem('score'))\n  }, [boxesNumber])\n\n  const lvlHandler = prop => {\n    setBoxesNumber(prop)\n  }\n\n  const resetHandler = () => {\n    getNewColors()\n  }\n\n  const checkColorHandler = x => {\n    if (x === trueColor) {\n      alert(\n        `Good job! You get it after ${scoreCounter} attempts, and recive ${\n          boxesNumber - scoreCounter + 1\n        } points!`\n      )\n      setScoreCounter(1)\n      setScore(score + boxesNumber - scoreCounter + 1)\n      resetHandler()\n    } else {\n      const updatedList = reducedBoxesList.filter(item => x !== item)\n      setReducedBoxesList(updatedList)\n      setScoreCounter(scoreCounter + 1)\n    }\n  }\n\n  const colorToggler = () => {\n    setIsHex(!isHex)\n  }\n\n  const resetScore = () => {\n    setScore(0)\n    window.localStorage.removeItem('score')\n  }\n\n  const saveScore = () => {\n    window.localStorage.setItem('score', score)\n  }\n\n  const customLvlHandler = prop => {\n    setCustomLvlBoxes(prop)\n  }\n\n  const customLvlNameHandler = prop => {\n    setCustomLvlName(prop)\n  }\n\n  const formSubmissionHandler = e => {\n    e.preventDefault()\n    if (customLvlName === '' && customLvlBoxes === '') {\n      alert('Please, fill all fields!')\n    } else {\n      setCustomLvlBoxes('')\n      setCustomLvlName('')\n      const addLvl = {\n        lvlName: customLvlName,\n        lvlNumBoxes: +customLvlBoxes,\n      }\n\n      setCustomLvl(prevState => [addLvl, ...prevState])\n    }\n  }\n\n  const deleteCustomLvlsHandler = () => {\n    setCustomLvl([])\n  }\n\n  const hintHandler = () => {\n    const withoutTrueColor = colors.filter(x => x !== trueColor)\n    const halfLength = Math.floor(withoutTrueColor.length / 2)\n\n    const halfSize = withoutTrueColor.splice(0, halfLength).concat(trueColor)\n    setReducedBoxesList(halfSize)\n    setBoxesNumber(halfSize.length)\n  }\n\n  return (\n    <div>\n      {!allGenerated ? (\n        <h1>Generating data...</h1>\n      ) : (\n        <div className='d-flex container'>\n          <ColorGameControls\n            onHint={() => hintHandler()}\n            onSaveScore={() => saveScore()}\n            onResetScore={() => resetScore()}\n            onResetHandler={() => resetHandler()}\n            onColorToggler={() => colorToggler()}\n            onLvlHandler={prop => lvlHandler(prop)}\n            onCustomLvlHandler={prop => customLvlHandler(prop)}\n            onCustomLvlNameHandler={prop => customLvlNameHandler(prop)}\n            onDeleteCustomLvlsHandler={() => deleteCustomLvlsHandler()}\n            onFormSubmissionHandler={e => formSubmissionHandler(e)}\n            trueColor={trueColor}\n            customLvl={customLvl}\n            customLvlName={customLvlName}\n            customLvlBoxes={customLvlBoxes}\n            lvlButton={lvlButton}\n            score={score}\n          />\n          <ColorGamePlayground\n            onCheckColor={checkColorHandler}\n            background={reducedBoxesList}\n            trueColor={trueColor}\n            score={score}\n            boxes={boxesNumber}\n          />\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default AppContainer\n","import './App.css'\nimport AppContainer from './components/AppContainer'\n\nfunction App() {\n\treturn (\n\t\t<div className='App'>\n\t\t\t<AppContainer />\n\t\t</div>\n\t)\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n\tif (onPerfEntry && onPerfEntry instanceof Function) {\n\t\timport('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n\t\t\tgetCLS(onPerfEntry)\n\t\t\tgetFID(onPerfEntry)\n\t\t\tgetFCP(onPerfEntry)\n\t\t\tgetLCP(onPerfEntry)\n\t\t\tgetTTFB(onPerfEntry)\n\t\t})\n\t}\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './index.css'\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}