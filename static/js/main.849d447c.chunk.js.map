{"version":3,"sources":["components/ButtonComponent.js","components/colorBoxes.js","components/mainVisual.js","App.js","reportWebVitals.js","index.js"],"names":["ButtonComponent","props","Button","color","onClick","className","children","ColorBoxes","resetLvl","background","boxes","useState","newList","setNewList","counter","setCounter","score","setScore","trueColor","useEffect","window","localStorage","getItem","setItem","removeItem","map","x","style","alert","updatedList","filter","item","colorChecker","nanoid","MainVisual","colors","setColors","setTrueColor","rgbResult","setRgbResult","isHex","setIsHex","isGenerated","setIsGenerated","getNewColors","hexToRgb","newColors","Array","from","keys","length","result","characters","charactersLength","i","charAt","Math","floor","random","hexGen","randomer","lvlHandler","prop","resetHandler","hexBase","cutter","substring","match","indexOf","currentResult","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.849d447c.chunk.js","sourcesContent":["import { Button } from 'reactstrap';\r\n\r\nconst ButtonComponent = props => {\r\n  return (\r\n    <Button\r\n      color={props.color}\r\n      onClick={() => props.onClick()}\r\n      className={props.className}\r\n    >\r\n      {props.children}\r\n    </Button>\r\n  );\r\n};\r\n\r\nexport default ButtonComponent;\r\n","import { nanoid } from 'nanoid';\r\nimport { useEffect, useState } from 'react';\r\nimport ButtonComponent from './ButtonComponent';\r\n\r\nconst ColorBoxes = props => {\r\n  const resetLvl = props.resetLvl;\r\n  const background = props.background;\r\n  const boxes = props.boxes;\r\n  const [newList, setNewList] = useState([]);\r\n  const [counter, setCounter] = useState(1);\r\n  const [score, setScore] = useState(0);\r\n  const trueColor = props.trueColor;\r\n\r\n  useEffect(() => {\r\n    setScore(+window.localStorage.getItem('score'));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setNewList(background);\r\n  }, [background]);\r\n\r\n  const colorChecker = x => {\r\n    if (x === trueColor) {\r\n      alert(\r\n        `Good job! You get it after ${counter} attempts, and recive ${\r\n          boxes - counter + 1\r\n        } points!`\r\n      );\r\n      setCounter(1);\r\n      setScore(score + boxes - counter + 1);\r\n      resetLvl();\r\n    } else {\r\n      const updatedList = newList.filter(item => x !== item);\r\n      setNewList(updatedList);\r\n      setCounter(counter + 1);\r\n    }\r\n  };\r\n\r\n  const resetScore = () => {\r\n    setScore(0);\r\n    window.localStorage.removeItem('score');\r\n  };\r\n\r\n  const saveData = () => {\r\n    window.localStorage.setItem('score', score);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"d-flex justify-content-between my-3\">\r\n        <h2>score: {score}</h2>\r\n        <ButtonComponent onClick={saveData} color=\"success\">\r\n          save score\r\n        </ButtonComponent>\r\n        <ButtonComponent onClick={resetScore} color=\"danger\">\r\n          reset score\r\n        </ButtonComponent>\r\n      </div>\r\n      <div className=\"d-flex flex-wrap justify-content-between\">\r\n        {newList.map(x => (\r\n          <div key={nanoid()} className=\"col-4\">\r\n            <button\r\n              className=\"box p-5 my-3\"\r\n              style={{ background: x }}\r\n              onClick={() => colorChecker(x)}\r\n            ></button>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ColorBoxes;\r\n","import { useState, useEffect } from 'react';\r\nimport ButtonComponent from './ButtonComponent';\r\nimport ColorBoxes from './colorBoxes';\r\n\r\nconst hexGen = length => {\r\n  var result = '#';\r\n  var characters = 'abcdef0123456789';\r\n  var charactersLength = characters.length;\r\n  for (let i = 0; i < length; i++) {\r\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\r\n  }\r\n  return result;\r\n};\r\n\r\nconst MainVisual = () => {\r\n  const [counter, setCounter] = useState(3);\r\n  const [colors, setColors] = useState([]);\r\n  const [trueColor, setTrueColor] = useState('');\r\n  const [rgbResult, setRgbResult] = useState([]);\r\n  const [isHex, setIsHex] = useState(true);\r\n  const [isGenerated, setIsGenerated] = useState(false);\r\n\r\n  useEffect(() => {\r\n    getNewColors();\r\n    if (isGenerated) {\r\n      hexToRgb();\r\n    }\r\n  }, [counter, isGenerated]);\r\n\r\n  const getNewColors = () => {\r\n    const newColors = Array.from(Array(counter).keys()).map(() => hexGen(6));\r\n\r\n    const randomer = newColors[Math.floor(Math.random() * newColors.length)];\r\n    setTrueColor(randomer);\r\n    setColors(newColors);\r\n    setIsGenerated(true);\r\n  };\r\n\r\n  const lvlHandler = prop => {\r\n    setCounter(prop);\r\n    setRgbResult([]);\r\n    setIsGenerated(false);\r\n  };\r\n\r\n  const resetHandler = () => {\r\n    getNewColors();\r\n    setRgbResult([]);\r\n    setIsGenerated(false);\r\n  };\r\n\r\n  const hexToRgb = () => {\r\n    const hexBase = [\r\n      '0',\r\n      '1',\r\n      '2',\r\n      '3',\r\n      '4',\r\n      '5',\r\n      '6',\r\n      '7',\r\n      '8',\r\n      '9',\r\n      'a',\r\n      'b',\r\n      'c',\r\n      'd',\r\n      'e',\r\n      'f',\r\n    ];\r\n    const cutter = trueColor.substring(1).match(/.{1,2}/g);\r\n\r\n    for (let i = 0; i < cutter.length; i++) {\r\n      const value1 = hexBase.indexOf(cutter[i][0]) * 16;\r\n      const value2 = hexBase.indexOf(cutter[i][1]);\r\n      const result = value1 + value2 + ', ';\r\n\r\n      setRgbResult(currentResult => [...currentResult, result]);\r\n    }\r\n  };\r\n\r\n  const colorToggler = () => {\r\n    setIsHex(!isHex);\r\n  };\r\n\r\n  return (\r\n    <div className=\"container d-flex flex-column mt-5 col-xl-4 col-lg-6\">\r\n      <div className=\"border-bottom border-dark mb-3\">\r\n        <h3>Guess the color?</h3>\r\n        {isHex ? <h3>hex: {trueColor}</h3> : <h3>rgb: {rgbResult}</h3>}\r\n        <ButtonComponent\r\n          onClick={() => colorToggler()}\r\n          color=\"primary\"\r\n          className=\"my-3\"\r\n        >\r\n          {isHex ? 'convert to RGB' : 'convert to HEX'}\r\n        </ButtonComponent>\r\n      </div>\r\n\r\n      <div className=\"d-flex justify-content-between border-bottom border-dark pb-3\">\r\n        <ButtonComponent onClick={() => lvlHandler(3)} color=\"success\">\r\n          lvl 1\r\n        </ButtonComponent>\r\n        <ButtonComponent onClick={() => lvlHandler(6)} color=\"success\">\r\n          lvl 2\r\n        </ButtonComponent>\r\n        <ButtonComponent onClick={() => lvlHandler(9)} color=\"success\">\r\n          lvl 3\r\n        </ButtonComponent>\r\n\r\n        <ButtonComponent onClick={() => resetHandler()} color=\"danger\">\r\n          RESET LVL\r\n        </ButtonComponent>\r\n      </div>\r\n      <ColorBoxes\r\n        resetLvl={() => resetHandler()}\r\n        boxes={counter}\r\n        background={colors}\r\n        trueColor={trueColor}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MainVisual;\r\n","import './App.css';\nimport MainVisual from './components/mainVisual';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainVisual />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}