{"version":3,"sources":["components/colorBoxes.js","components/mainVisual.js","App.js","reportWebVitals.js","index.js"],"names":["ColorBoxes","props","background","trueColor","className","map","x","style","onClick","console","log","alert","colorChecker","nanoid","hexGen","length","result","characters","charactersLength","i","charAt","Math","floor","random","MainVisual","useState","counter","setCounter","colors","setColors","setTrueColor","useEffect","getNewColors","newColors","color","push","randomer","lvlHandler","prop","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qQA+BeA,EA5BI,SAAAC,GACjB,IAAMC,EAAaD,EAAMC,WACnBC,EAAYF,EAAME,UAWxB,OACE,qBAAKC,UAAU,gBAAf,SACGF,EAAWG,KAAI,SAAAC,GAAC,OACf,8BACE,wBACEF,UAAU,MACVG,MAAO,CAAEL,WAAYI,GACrBE,QAAS,kBAhBE,SAAAF,GACnBG,QAAQC,IAAIJ,EAAGH,GACXG,IAAMH,EACRQ,MAAM,eAAD,OAAgBR,IAErBQ,MAAM,kBAWeC,CAAaN,OAJtBO,qBChBZC,EAAS,SAAAC,GAIb,IAHA,IAAIC,EAAS,IACTC,EAAa,mBACbC,EAAmBD,EAAWF,OACzBI,EAAI,EAAGA,EAAIJ,EAAQI,IAC1BH,GAAUC,EAAWG,OAAOC,KAAKC,MAAMD,KAAKE,SAAWL,IAEzD,OAAOF,GAqDMQ,EAlDI,WACjB,MAA8BC,mBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAAkCJ,mBAAS,IAA3C,mBAAOtB,EAAP,KAAkB2B,EAAlB,KAEAC,qBAAU,WACRC,MACC,CAACN,IAEJ,IAAMM,EAAe,WAEnB,IADA,IAAMC,EAAY,GACTd,EAAI,EAAGA,EAAIO,EAASP,IAAK,CAChC,IAAMe,EAAQpB,EAAO,GACrBmB,EAAUE,KAAKD,GAEjB,IAAME,EAAWH,EAAUZ,KAAKC,MAAMD,KAAKE,SAAWU,EAAUlB,SAChEe,EAAaM,GACbP,EAAUI,IAGNI,EAAa,SAAAC,GACjBX,EAAWW,IAOb,OACE,sBAAKlC,UAAU,OAAf,UACE,mDAAsBD,KACtB,sBAAKC,UAAU,cAAf,UACE,wBAAQI,QAAS,kBAAM6B,EAAW,IAAIjC,UAAU,cAAhD,mBAGA,wBAAQI,QAAS,kBAAM6B,EAAW,IAAIjC,UAAU,cAAhD,mBAGA,wBAAQI,QAAS,kBAAM6B,EAAW,IAAIjC,UAAU,cAAhD,mBAGA,wBAAQI,QAAS,WAhBrBmB,EAAW,IAgBgCvB,UAAU,gBAAjD,sBAIF,cAAC,EAAD,CAAYF,WAAY0B,EAAQzB,UAAWA,QC/ClCoC,MARf,WACE,OACE,qBAAKnC,UAAU,MAAf,SACE,cAAC,EAAD,OCMSoC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.98be9e5d.chunk.js","sourcesContent":["import './index.css';\r\nimport { nanoid } from 'nanoid';\r\n\r\nconst ColorBoxes = props => {\r\n  const background = props.background;\r\n  const trueColor = props.trueColor;\r\n\r\n  const colorChecker = x => {\r\n    console.log(x, trueColor);\r\n    if (x === trueColor) {\r\n      alert(`You get it! ${trueColor}`);\r\n    } else {\r\n      alert('You are wrong!');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"box-container\">\r\n      {background.map(x => (\r\n        <div key={nanoid()}>\r\n          <button\r\n            className=\"box\"\r\n            style={{ background: x }}\r\n            onClick={() => colorChecker(x)}\r\n          ></button>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ColorBoxes;\r\n","import { useState, useEffect } from 'react';\r\nimport ColorBoxes from './colorBoxes';\r\n\r\nconst hexGen = length => {\r\n  var result = '#';\r\n  var characters = 'abcdef0123456789';\r\n  var charactersLength = characters.length;\r\n  for (let i = 0; i < length; i++) {\r\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\r\n  }\r\n  return result;\r\n};\r\n\r\nconst MainVisual = () => {\r\n  const [counter, setCounter] = useState(3);\r\n  const [colors, setColors] = useState([]);\r\n  const [trueColor, setTrueColor] = useState('');\r\n\r\n  useEffect(() => {\r\n    getNewColors();\r\n  }, [counter]);\r\n\r\n  const getNewColors = () => {\r\n    const newColors = [];\r\n    for (let i = 0; i < counter; i++) {\r\n      const color = hexGen(6);\r\n      newColors.push(color);\r\n    }\r\n    const randomer = newColors[Math.floor(Math.random() * newColors.length)];\r\n    setTrueColor(randomer);\r\n    setColors(newColors);\r\n  };\r\n\r\n  const lvlHandler = prop => {\r\n    setCounter(prop);\r\n  };\r\n\r\n  const resetHandler = () => {\r\n    setCounter(3);\r\n  };\r\n\r\n  return (\r\n    <div className=\"main\">\r\n      <h2>Guess the color: {trueColor}</h2>\r\n      <div className=\"btn-wrapper\">\r\n        <button onClick={() => lvlHandler(3)} className=\"btn lvl-btn\">\r\n          lvl 1\r\n        </button>\r\n        <button onClick={() => lvlHandler(6)} className=\"btn lvl-btn\">\r\n          lvl 2\r\n        </button>\r\n        <button onClick={() => lvlHandler(9)} className=\"btn lvl-btn\">\r\n          lvl 3\r\n        </button>\r\n        <button onClick={() => resetHandler()} className=\"btn reset-btn\">\r\n          RESET\r\n        </button>\r\n      </div>\r\n      <ColorBoxes background={colors} trueColor={trueColor} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MainVisual;\r\n","import './App.css';\nimport MainVisual from './components/mainVisual';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainVisual />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}