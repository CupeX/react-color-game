{"version":3,"sources":["components/ColorGamePlayground.js","components/ButtonComponent.js","components/HexToRgb.js","components/ColorGameControls.js","components/HexGenerator.js","components/AppContainer.js","App.js","reportWebVitals.js","index.js"],"names":["ColorGamePlayground","props","className","customWidth","background","map","x","style","onClick","onCheckColor","nanoid","ButtonComponent","Button","color","children","hexToRgb","newArray","hexBase","cutter","substring","match","i","length","result","indexOf","push","ColorGameControls","score","isHex","trueColor","customLvl","customLvlName","customLvlBoxes","onSaveScore","onResetScore","onColorToggler","lvlButton","onLvlHandler","onResetHandler","maxHeight","lvlNumBoxes","lvlName","onSubmit","e","onFormSubmissionHandler","InputGroup","InputGroupAddon","addonType","InputGroupText","Input","type","name","value","onChange","onCustomLvlNameHandler","target","onCustomLvlHandler","onDeleteCustomLvlsHandler","hexGenerator","characters","charactersLength","charAt","Math","floor","random","AppContainer","useState","boxesNumber","setBoxesNumber","scoreCounter","setScoreCounter","setColors","setTrueColor","setIsHex","setScore","reducedBoxesList","setReducedBoxesList","setCustomLvlName","setCustomLvlBoxes","setCustomLvl","useEffect","getNewColors","window","localStorage","getItem","newColors","Array","from","keys","randomer","resetHandler","removeItem","setItem","prop","lvlHandler","customLvlHandler","customLvlNameHandler","preventDefault","alert","addLvl","prevState","console","log","formSubmissionHandler","updatedList","filter","item","boxes","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7b971654.chunk.js","sourcesContent":["import { nanoid } from 'nanoid';\r\n\r\nconst ColorGamePlayground = props => {\r\n  const customWidth = () => {\r\n    // if (props.boxes < 19) {\r\n    //   return 'col-6';\r\n    // } else if (props.boxes >= 19 && props.boxes < 31) {\r\n    //   return 'col-8';\r\n    // } else if (props.boxes >= 31 && props.boxes < 37) {\r\n    //   return 'col-10';\r\n    // } else {\r\n    //   return 'col-12';\r\n    // }\r\n  };\r\n\r\n  return (\r\n    <div className=\"d-flex flex-wrap justify-content-center align-items-center overflow-auto col-8 vh-100 p-3\">\r\n      <div\r\n        className={`d-flex flex-wrap justify-content-between align-items-center overflow-auto ${customWidth()}`}\r\n      >\r\n        {props.background.map(x => (\r\n          <div key={nanoid()} className=\"\">\r\n            <button\r\n              className=\"p-5 m-1\"\r\n              style={{ background: x }}\r\n              onClick={() => props.onCheckColor(x)}\r\n            ></button>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ColorGamePlayground;\r\n","import { Button } from 'reactstrap';\r\n\r\nconst ButtonComponent = props => {\r\n  return (\r\n    <Button\r\n      color={props.color}\r\n      onClick={() => props.onClick()}\r\n      className={props.className}\r\n    >\r\n      {props.children}\r\n    </Button>\r\n  );\r\n};\r\n\r\nexport default ButtonComponent;\r\n","const hexToRgb = x => {\r\n  const newArray = [];\r\n\r\n  const hexBase = [\r\n    '0',\r\n    '1',\r\n    '2',\r\n    '3',\r\n    '4',\r\n    '5',\r\n    '6',\r\n    '7',\r\n    '8',\r\n    '9',\r\n    'a',\r\n    'b',\r\n    'c',\r\n    'd',\r\n    'e',\r\n    'f',\r\n  ];\r\n  const cutter = x.substring(1).match(/.{1,2}/g);\r\n  for (let i = 0; i < cutter.length; i++) {\r\n    const value1 = hexBase.indexOf(cutter[i][0]) * 16;\r\n    const value2 = hexBase.indexOf(cutter[i][1]);\r\n    const result = value1 + value2 + ', ';\r\n    newArray.push(result);\r\n  }\r\n\r\n  return newArray;\r\n};\r\n\r\nexport default hexToRgb;\r\n","import ButtonComponent from './ButtonComponent';\r\nimport hexToRgb from './HexToRgb';\r\nimport {\r\n  Button,\r\n  InputGroup,\r\n  InputGroupAddon,\r\n  InputGroupText,\r\n  Input,\r\n} from 'reactstrap';\r\n\r\nconst ColorGameControls = props => {\r\n  const score = props.score;\r\n  const isHex = props.isHex;\r\n  const trueColor = props.trueColor;\r\n  const customLvl = props.customLvl;\r\n  const customLvlName = props.customLvlName;\r\n  const customLvlBoxes = props.customLvlBoxes;\r\n\r\n  return (\r\n    <div className=\"col-4 vh-100\">\r\n      <div className=\"d-flex justify-content-between border-bottom border-dark my-3 pb-3\">\r\n        <h2>score: {score}</h2>\r\n        <ButtonComponent onClick={() => props.onSaveScore()} color=\"success\">\r\n          save score\r\n        </ButtonComponent>\r\n        <ButtonComponent onClick={() => props.onResetScore()} color=\"danger\">\r\n          reset score\r\n        </ButtonComponent>\r\n      </div>\r\n      <div className=\"border-bottom border-dark\">\r\n        <h3>Guess the color?</h3>\r\n        {isHex ? (\r\n          <h3>hex: {trueColor}</h3>\r\n        ) : (\r\n          <h3>rgb: {hexToRgb(trueColor)}</h3>\r\n        )}\r\n        <ButtonComponent\r\n          onClick={() => props.onColorToggler()}\r\n          color=\"primary\"\r\n          className=\"my-3\"\r\n        >\r\n          {isHex ? 'convert to RGB' : 'convert to HEX'}\r\n        </ButtonComponent>\r\n      </div>\r\n\r\n      <div className=\"border-bottom border-dark my-3\">\r\n        <div className=\"d-flex justify-content-between border-bottom border-dark pb-3\">\r\n          {props.lvlButton.map(x => (\r\n            <Button\r\n              onClick={() => props.onLvlHandler(x * 3)}\r\n              color=\"success\"\r\n              className=\"mx-1\"\r\n            >\r\n              lvl {x}\r\n            </Button>\r\n          ))}\r\n\r\n          <ButtonComponent\r\n            onClick={() => props.onResetHandler()}\r\n            color=\"danger\"\r\n          >\r\n            RESET LVL\r\n          </ButtonComponent>\r\n        </div>\r\n\r\n        <div className=\"overflow-auto my-3\" style={{ maxHeight: '20vh' }}>\r\n          <h5>Custom levels:</h5>\r\n          {customLvl.map(x => (\r\n            <Button\r\n              onClick={() => props.onLvlHandler(x.lvlNumBoxes)}\r\n              color=\"success\"\r\n              className=\"m-2\"\r\n            >\r\n              {x.lvlName}\r\n            </Button>\r\n          ))}\r\n        </div>\r\n\r\n        <form onSubmit={e => props.onFormSubmissionHandler(e)}>\r\n          <InputGroup className=\"my-2\">\r\n            <InputGroupAddon addonType=\"prepend\">\r\n              <InputGroupText>add custom lvl name:</InputGroupText>\r\n            </InputGroupAddon>\r\n            <Input\r\n              type=\"text\"\r\n              name=\"lvl name\"\r\n              value={customLvlName}\r\n              onChange={e => props.onCustomLvlNameHandler(e.target.value)}\r\n            />\r\n          </InputGroup>\r\n          <InputGroup className=\"my-2\">\r\n            <InputGroupAddon addonType=\"prepend\">\r\n              <InputGroupText>add number of boxes:</InputGroupText>\r\n            </InputGroupAddon>\r\n            <Input\r\n              type=\"number\"\r\n              name=\"lvls\"\r\n              value={customLvlBoxes}\r\n              onChange={e => props.onCustomLvlHandler(e.target.value)}\r\n            />\r\n          </InputGroup>\r\n\r\n          <Button type=\"submit\" color=\"success\" className=\"m-2\">\r\n            add custom lvl\r\n          </Button>\r\n        </form>\r\n        <Button\r\n          onClick={() => props.onDeleteCustomLvlsHandler()}\r\n          type=\"btn\"\r\n          color=\"danger\"\r\n          className=\"m-2\"\r\n        >\r\n          delete custom levels\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ColorGameControls;\r\n","const hexGenerator = length => {\r\n  var result = '#';\r\n  var characters = 'abcdef0123456789';\r\n  var charactersLength = characters.length;\r\n  for (let i = 0; i < length; i++) {\r\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\r\n  }\r\n  return result;\r\n};\r\n\r\nexport default hexGenerator;\r\n","import { useState, useEffect } from 'react';\r\nimport ColorGamePlayground from './ColorGamePlayground';\r\nimport ColorGameControls from './ColorGameControls';\r\nimport hexGenerator from './HexGenerator';\r\n\r\nconst AppContainer = () => {\r\n  const [boxesNumber, setBoxesNumber] = useState(3);\r\n  const [scoreCounter, setScoreCounter] = useState(1);\r\n  const [colors, setColors] = useState([]);\r\n  const [trueColor, setTrueColor] = useState('');\r\n  const [isHex, setIsHex] = useState(true);\r\n  const [score, setScore] = useState(0);\r\n  const [reducedBoxesList, setReducedBoxesList] = useState([]);\r\n  const [lvlButton, setLvlButton] = useState([1, 2, 3, 4, 5]);\r\n  const [customLvlName, setCustomLvlName] = useState('');\r\n  const [customLvlBoxes, setCustomLvlBoxes] = useState('');\r\n  const [customLvl, setCustomLvl] = useState([]);\r\n  const [formIsValid, setFormIsValid] = useState(false);\r\n\r\n  useEffect(() => {\r\n    getNewColors();\r\n    setScore(+window.localStorage.getItem('score'));\r\n  }, [boxesNumber]);\r\n\r\n  const getNewColors = () => {\r\n    const newColors = Array.from(Array(boxesNumber).keys()).map(() =>\r\n      hexGenerator(6)\r\n    );\r\n\r\n    const randomer = newColors[Math.floor(Math.random() * newColors.length)];\r\n    setTrueColor(randomer);\r\n    setColors(newColors);\r\n    setReducedBoxesList(newColors);\r\n  };\r\n\r\n  const lvlHandler = prop => {\r\n    setBoxesNumber(prop);\r\n  };\r\n\r\n  const resetHandler = () => {\r\n    getNewColors();\r\n  };\r\n\r\n  const checkColorHandler = x => {\r\n    if (x === trueColor) {\r\n      alert(\r\n        `Good job! You get it after ${scoreCounter} attempts, and recive ${\r\n          boxesNumber - scoreCounter + 1\r\n        } points!`\r\n      );\r\n      setScoreCounter(1);\r\n      setScore(score + boxesNumber - scoreCounter + 1);\r\n      resetHandler();\r\n    } else {\r\n      const updatedList = reducedBoxesList.filter(item => x !== item);\r\n      setReducedBoxesList(updatedList);\r\n      setScoreCounter(scoreCounter + 1);\r\n    }\r\n  };\r\n\r\n  const colorToggler = () => {\r\n    setIsHex(!isHex);\r\n  };\r\n\r\n  const resetScore = () => {\r\n    setScore(0);\r\n    window.localStorage.removeItem('score');\r\n  };\r\n\r\n  const saveScore = () => {\r\n    window.localStorage.setItem('score', score);\r\n  };\r\n\r\n  const customLvlHandler = prop => {\r\n    setCustomLvlBoxes(prop);\r\n  };\r\n\r\n  const customLvlNameHandler = prop => {\r\n    setCustomLvlName(prop);\r\n  };\r\n\r\n  const formSubmissionHandler = e => {\r\n    e.preventDefault();\r\n    if (customLvlName === '' && customLvlBoxes === '') {\r\n      alert('Please, fill all fields!');\r\n    } else {\r\n      setCustomLvlBoxes('');\r\n      setCustomLvlName('');\r\n      const addLvl = {\r\n        lvlName: customLvlName,\r\n        lvlNumBoxes: +customLvlBoxes,\r\n      };\r\n\r\n      setCustomLvl(prevState => [addLvl, ...prevState]);\r\n    }\r\n    console.log(customLvlName, customLvlBoxes);\r\n  };\r\n\r\n  const deleteCustomLvlsHandler = () => {\r\n    setCustomLvl([]);\r\n  };\r\n\r\n  return (\r\n    <div className=\"d-flex container flex-row\">\r\n      <ColorGameControls\r\n        score={score}\r\n        onResetScore={() => resetScore()}\r\n        onResetHandler={() => resetHandler()}\r\n        onColorToggler={() => colorToggler()}\r\n        onSaveScore={() => saveScore()}\r\n        onLvlHandler={prop => lvlHandler(prop)}\r\n        onCustomLvlHandler={prop => customLvlHandler(prop)}\r\n        onDeleteCustomLvlsHandler={() => deleteCustomLvlsHandler()}\r\n        onCustomLvlNameHandler={prop => customLvlNameHandler(prop)}\r\n        onFormSubmissionHandler={e => formSubmissionHandler(e)}\r\n        isHex={isHex}\r\n        trueColor={trueColor}\r\n        customLvl={customLvl}\r\n        customLvlName={customLvlName}\r\n        customLvlBoxes={customLvlBoxes}\r\n        lvlButton={lvlButton}\r\n      />\r\n      <ColorGamePlayground\r\n        onCheckColor={checkColorHandler}\r\n        background={reducedBoxesList}\r\n        trueColor={trueColor}\r\n        score={score}\r\n        boxes={boxesNumber}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AppContainer;\r\n","import './App.css';\nimport AppContainer from './components/AppContainer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AppContainer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}