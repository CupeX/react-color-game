{"version":3,"sources":["components/ButtonComponent.js","components/colorBoxes.js","components/mainVisual.js","App.js","reportWebVitals.js","index.js"],"names":["ButtonComponent","props","Button","color","onClick","children","ColorBoxes","resetLvl","background","boxes","useState","newList","setNewList","counter","setCounter","score","setScore","trueColor","useEffect","className","map","x","style","index","indexOf","alert","splice","updateList","console","log","colorChecker","nanoid","hexGen","length","result","characters","charactersLength","i","charAt","Math","floor","random","MainVisual","colors","setColors","setTrueColor","getNewColors","newColors","push","randomer","lvlHandler","prop","resetHandler","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8a657a6d.chunk.js","sourcesContent":["import { Button } from 'reactstrap';\r\n\r\nconst ButtonComponent = props => {\r\n  return (\r\n    <Button color={props.color} onClick={() => props.onClick()}>\r\n      {props.children}\r\n    </Button>\r\n  );\r\n};\r\n\r\nexport default ButtonComponent;\r\n","import { nanoid } from 'nanoid';\r\nimport { useEffect, useState } from 'react';\r\nimport ButtonComponent from './ButtonComponent';\r\n\r\nconst ColorBoxes = props => {\r\n  const resetLvl = props.resetLvl;\r\n  const background = props.background;\r\n  const boxes = props.boxes;\r\n  const [newList, setNewList] = useState([]);\r\n  const [counter, setCounter] = useState(1);\r\n  const [score, setScore] = useState(0);\r\n  const trueColor = props.trueColor;\r\n\r\n  useEffect(() => {\r\n    setNewList(background);\r\n  }, [background]);\r\n\r\n  const colorChecker = x => {\r\n    const index = background.indexOf(x);\r\n    if (x === trueColor) {\r\n      alert(\r\n        `Good job! You get it after ${counter} attempts, and recive ${\r\n          boxes - counter + 1\r\n        } points!`\r\n      );\r\n      setCounter(1);\r\n      setScore(score + boxes - counter + 1);\r\n      resetLvl();\r\n    } else {\r\n      if (index > -1) {\r\n        background.splice(index, 1);\r\n        const updateList = [...background];\r\n        setNewList(updateList);\r\n      }\r\n      setCounter(counter + 1);\r\n      console.log(counter);\r\n    }\r\n  };\r\n\r\n  const resetScore = () => {\r\n    setScore(0);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"d-flex justify-content-between my-3\">\r\n        <h2>score: {score}</h2>\r\n        <ButtonComponent onClick={resetScore} color=\"danger\">\r\n          reset score\r\n        </ButtonComponent>\r\n      </div>\r\n      <div className=\"d-flex flex-wrap justify-content-between\">\r\n        {newList.map(x => (\r\n          <div key={nanoid()}>\r\n            <button\r\n              className=\"box p-5 my-3\"\r\n              style={{ background: x }}\r\n              onClick={() => colorChecker(x)}\r\n            ></button>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ColorBoxes;\r\n","import { useState, useEffect } from 'react';\r\nimport ButtonComponent from './ButtonComponent';\r\nimport ColorBoxes from './colorBoxes';\r\n\r\nconst hexGen = length => {\r\n  var result = '#';\r\n  var characters = 'abcdef0123456789';\r\n  var charactersLength = characters.length;\r\n  for (let i = 0; i < length; i++) {\r\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\r\n  }\r\n  return result;\r\n};\r\n\r\nconst MainVisual = () => {\r\n  const [counter, setCounter] = useState(3);\r\n  const [colors, setColors] = useState([]);\r\n  const [trueColor, setTrueColor] = useState('');\r\n\r\n  useEffect(() => {\r\n    getNewColors();\r\n  }, [counter]);\r\n\r\n  const getNewColors = () => {\r\n    const newColors = [];\r\n    for (let i = 0; i < counter; i++) {\r\n      const color = hexGen(6);\r\n      newColors.push(color);\r\n    }\r\n    const randomer = newColors[Math.floor(Math.random() * newColors.length)];\r\n    setTrueColor(randomer);\r\n    setColors(newColors);\r\n  };\r\n\r\n  const lvlHandler = prop => {\r\n    setCounter(prop);\r\n  };\r\n\r\n  const resetHandler = () => {\r\n    getNewColors();\r\n  };\r\n\r\n  return (\r\n    <div className=\"container w-25 d-flex flex-column mt-5\">\r\n      <h3>Guess the color: {trueColor}</h3>\r\n      <div className=\"d-flex justify-content-between border-bottom border-dark pb-3\">\r\n        <ButtonComponent onClick={() => lvlHandler(3)} color=\"success\">\r\n          lvl 1\r\n        </ButtonComponent>\r\n        <ButtonComponent onClick={() => lvlHandler(6)} color=\"success\">\r\n          lvl 2\r\n        </ButtonComponent>\r\n        <ButtonComponent onClick={() => lvlHandler(9)} color=\"success\">\r\n          lvl 3\r\n        </ButtonComponent>\r\n\r\n        <ButtonComponent onClick={() => resetHandler()} color=\"danger\">\r\n          RESET LVL\r\n        </ButtonComponent>\r\n      </div>\r\n      <ColorBoxes\r\n        resetLvl={() => resetHandler()}\r\n        boxes={counter}\r\n        background={colors}\r\n        trueColor={trueColor}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MainVisual;\r\n","import './App.css';\nimport MainVisual from './components/mainVisual';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainVisual />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}