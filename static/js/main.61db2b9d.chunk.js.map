{"version":3,"sources":["components/ColorGamePlayground.jsx","components/ButtonComponent.jsx","store/gameInProgress.js","store/gameSettings.js","components/RadioBtns.jsx","components/FormComponent.jsx","components/HexToRgb.js","components/RgbToHsl.js","components/DisplayFormat.jsx","components/ColorGameControls.jsx","components/HexGenerator.js","components/ReduxData.js","components/AppContainer.js","App.js","store/store.js","reportWebVitals.js","index.js"],"names":["ColorGamePlayground","props","className","colors","map","x","style","background","onClick","onCheckColor","nanoid","ButtonComponent","Button","color","children","gameInProgress","createSlice","name","initialState","trueColor","score","attempts","activeLevel","allGenerated","reducers","setScore","state","action","payload","setTrueColor","setColors","attemptsIncrement","attemptsReset","setAllGenerated","actions","gameSettings","curBoxNumber","initialBoxNumber","activeColorDisplayFormat","availableLevels","label","boxesNumber","customLevels","hintActive","extraReducers","setActiveColorDisplayFormat","setBoxesNumber","setCustomLevels","push","deleteCustomLevels","setHintActive","setInitialBoxNumber","RadioBtns","prop","onChange","e","target","value","htmlFor","id","type","FormComponent","customLvlBoxes","customLvlName","onChangeName","onChangeLvl","onSubmit","InputGroup","InputGroupAddon","addonType","InputGroupText","Input","hexToRgb","cutter","substring","match","newArray","hexBase","i","length","result","indexOf","rgbToHsl","r","g","b","max","Math","min","h","s","l","d","round","DisplayFormat","useSelector","content","rgb","display","hsl","ColorGameControls","onLvlHandler","dispatch","useDispatch","displayColorFormat","onSaveScore","onResetScore","radioBtnHandler","onResetHandler","maxHeight","onFormSubmissionHandler","onCustomLvlNameHandler","onCustomLvlHandler","onDeleteCustomLvlsHandler","onHint","hexGenerator","characters","charactersLength","charAt","floor","random","ReduxData","AppContainer","useState","setCustomLvlName","setCustomLvlBoxes","useEffect","window","localStorage","getItem","getNewColors","newColors","Array","from","keys","randomer","resetHandler","withoutTrueColor","filter","halfLength","halfSize","splice","concat","hintHandler","setItem","removeItem","onColorToggler","colorToggler","lvlHandler","customLvlHandler","console","log","customLvlNameHandler","preventDefault","alert","formSubmissionHandler","updatedList","item","App","configureStore","reducer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.61db2b9d.chunk.js","sourcesContent":["import { nanoid } from 'nanoid'\r\n\r\nconst ColorGamePlayground = props => {\r\n  return (\r\n    <div className='d-flex flex-wrap justify-content-center align-items-center overflow-auto col-8 vh-100 p-3'>\r\n      <div className='d-flex flex-wrap justify-content-between align-items-center overflow-auto'>\r\n        {props.colors.map(x => (\r\n          <div key={nanoid()} className=''>\r\n            <button\r\n              className='p-5 m-1'\r\n              style={{ background: x }}\r\n              onClick={() => props.onCheckColor(x)}\r\n            />\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ColorGamePlayground\r\n","import { Button } from 'reactstrap'\n\nconst ButtonComponent = props => (\n  <Button\n    color={props.color}\n    onClick={() => props.onClick()}\n    className={props.className}\n  >\n    {props.children}\n  </Button>\n)\n\nexport default ButtonComponent\n","import { createSlice } from '@reduxjs/toolkit'\r\n\r\nconst gameInProgress = createSlice({\r\n  name: 'gameInProgress',\r\n  initialState: {\r\n    trueColor: '',\r\n    colors: [],\r\n    score: 0,\r\n    attempts: 0,\r\n    activeLevel: 'easy',\r\n    allGenerated: false,\r\n  },\r\n  reducers: {\r\n    setScore(state, action) {\r\n      state.score = action.payload\r\n    },\r\n    setTrueColor(state, action) {\r\n      state.trueColor = action.payload\r\n    },\r\n    setColors(state, action) {\r\n      state.colors = action.payload\r\n    },\r\n    attemptsIncrement(state) {\r\n      state.attempts++\r\n    },\r\n    attemptsReset(state) {\r\n      state.attempts = 0\r\n    },\r\n    setAllGenerated(state, action) {\r\n      state.allGenerated = action.payload\r\n    },\r\n  },\r\n})\r\n\r\nexport const setScore = gameInProgress.actions.setScore\r\nexport const setTrueColor = gameInProgress.actions.setTrueColor\r\nexport const setColors = gameInProgress.actions.setColors\r\nexport const attemptsIncrement = gameInProgress.actions.attemptsIncrement\r\nexport const attemptsReset = gameInProgress.actions.attemptsReset\r\nexport const setAllGenerated = gameInProgress.actions.setAllGenerated\r\n\r\nexport default gameInProgress\r\n","import { createSlice } from '@reduxjs/toolkit'\r\nimport { setScore } from './gameInProgress'\r\n\r\nconst gameSettings = createSlice({\r\n  name: 'gameSettings',\r\n  initialState: {\r\n    curBoxNumber: 3,\r\n    initialBoxNumber: 3,\r\n    activeColorDisplayFormat: 'hex',\r\n    availableLevels: [\r\n      { label: 'easy', boxesNumber: 3 },\r\n      { label: 'medium', boxesNumber: 6 },\r\n      { label: 'hard', boxesNumber: 9 },\r\n    ],\r\n    customLevels: [],\r\n    hintActive: false,\r\n  },\r\n  extraReducers: {\r\n    // [setScore]: (state, action) => {\r\n    //   console.log(state.activeColorDisplayFormat, 'hello world')\r\n    //   console.log(action)\r\n    // },\r\n  },\r\n  reducers: {\r\n    setActiveColorDisplayFormat(state, action) {\r\n      state.activeColorDisplayFormat = action.payload\r\n    },\r\n    setBoxesNumber(state, action) {\r\n      state.curBoxNumber = action.payload\r\n    },\r\n    setCustomLevels(state, action) {\r\n      state.customLevels.push(action.payload)\r\n    },\r\n    deleteCustomLevels(state) {\r\n      state.customLevels = []\r\n    },\r\n    setHintActive(state, action) {\r\n      state.hintActive = action.payload\r\n    },\r\n    setInitialBoxNumber(state, action) {\r\n      state.initialBoxNumber = action.payload\r\n    },\r\n  },\r\n})\r\n\r\nexport const setActiveColorDisplayFormat =\r\n  gameSettings.actions.setActiveColorDisplayFormat\r\nexport const setBoxesNumber = gameSettings.actions.setBoxesNumber\r\nexport const setCustomLevels = gameSettings.actions.setCustomLevels\r\nexport const deleteCustomLevels = gameSettings.actions.deleteCustomLevels\r\nexport const setHintActive = gameSettings.actions.setHintActive\r\nexport const setInitialBoxNumber = gameSettings.actions.setInitialBoxNumber\r\n\r\nexport default gameSettings\r\n","const RadioBtns = prop => {\r\n  return (\r\n    <div onChange={e => prop.onChange(e.target.value)}>\r\n      <div className='form-check form-check-inline'>\r\n        <label className='form-check-label' htmlFor='hex'>\r\n          HEX\r\n          <input\r\n            className='form-check-input'\r\n            id='hex'\r\n            type='radio'\r\n            value='hex'\r\n            name='color'\r\n          />\r\n        </label>\r\n      </div>\r\n      <div className='form-check form-check-inline'>\r\n        <label className='form-check-label' htmlFor='rgb'>\r\n          RGB\r\n          <input\r\n            className='form-check-input'\r\n            id='rgb'\r\n            type='radio'\r\n            value='rgb'\r\n            name='color'\r\n          />\r\n        </label>\r\n      </div>\r\n\r\n      <div className='form-check form-check-inline'>\r\n        <label className='form-check-label' htmlFor='hsl'>\r\n          HSL\r\n          <input\r\n            className='form-check-input'\r\n            id='hsl'\r\n            type='radio'\r\n            value='hsl'\r\n            name='color'\r\n          />\r\n        </label>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default RadioBtns\r\n","import {\r\n  Button,\r\n  InputGroup,\r\n  InputGroupAddon,\r\n  InputGroupText,\r\n  Input,\r\n} from 'reactstrap'\r\n\r\nconst FormComponent = prop => {\r\n  const { customLvlBoxes, customLvlName, onChangeName, onChangeLvl, onSubmit } =\r\n    prop\r\n\r\n  return (\r\n    <div>\r\n      <form onSubmit={e => onSubmit(e)}>\r\n        <InputGroup className='my-2'>\r\n          <InputGroupAddon addonType='prepend'>\r\n            <InputGroupText>add custom lvl name:</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input\r\n            type='text'\r\n            name='lvl name'\r\n            value={customLvlName}\r\n            onChange={e => onChangeName(e.target.value)}\r\n          />\r\n        </InputGroup>\r\n        <InputGroup className='my-2'>\r\n          <InputGroupAddon addonType='prepend'>\r\n            <InputGroupText>add number of boxes:</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input\r\n            type='number'\r\n            name='lvls'\r\n            value={customLvlBoxes}\r\n            onChange={e => onChangeLvl(e.target.value)}\r\n          />\r\n        </InputGroup>\r\n\r\n        <Button type='submit' color='success' className='m-2'>\r\n          add custom lvl\r\n        </Button>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default FormComponent\r\n","const hexToRgb = x => {\n  const cutter = x.substring(1).match(/.{1,2}/g)\n  const newArray = []\n\n  const hexBase = [\n    '0',\n    '1',\n    '2',\n    '3',\n    '4',\n    '5',\n    '6',\n    '7',\n    '8',\n    '9',\n    'a',\n    'b',\n    'c',\n    'd',\n    'e',\n    'f',\n  ]\n\n  for (let i = 0; i < cutter.length; i++) {\n    const value1 = hexBase.indexOf(cutter[i][0]) * 16\n    const value2 = hexBase.indexOf(cutter[i][1])\n    const result = value1 + value2\n    newArray.push(result)\n  }\n\n  return newArray\n}\n\nexport default hexToRgb\n","const rgbToHsl = (r, g, b) => {\r\n  ;(r /= 255), (g /= 255), (b /= 255)\r\n\r\n  const max = Math.max(r, g, b)\r\n  const min = Math.min(r, g, b)\r\n  let h = (max + min) / 2\r\n  let s = (max + min) / 2\r\n  const l = (max + min) / 2\r\n\r\n  if (max == min) {\r\n    h = s = 0\r\n  } else {\r\n    const d = max - min\r\n    s = l > 0.5 ? d / (2 - max - min) : d / (max + min)\r\n\r\n    switch (max) {\r\n      case r:\r\n        h = (g - b) / d + (g < b ? 6 : 0)\r\n        break\r\n      case g:\r\n        h = (b - r) / d + 2\r\n        break\r\n      case b:\r\n        h = (r - g) / d + 4\r\n        break\r\n    }\r\n\r\n    h /= 6\r\n  }\r\n\r\n  return [Math.round(h * 360), Math.round(s * 100), Math.round(l * 100)]\r\n}\r\n\r\nexport default rgbToHsl\r\n","import { nanoid } from 'nanoid'\r\nimport { useSelector } from 'react-redux'\r\nimport hexToRgb from './HexToRgb'\r\nimport rgbToHsl from './RgbToHsl'\r\n\r\nconst DisplayFormat = trueColor => {\r\n  const activeColorDisplayFormat = useSelector(\r\n    state => state.gameSettings.activeColorDisplayFormat\r\n  )\r\n\r\n  let content = ''\r\n\r\n  const rgb = hexToRgb(trueColor).map(x => (\r\n    <h2 key={nanoid()} style={{ display: 'inline' }}>\r\n      {x},\r\n    </h2>\r\n  ))\r\n  const hsl = rgbToHsl(...hexToRgb(trueColor)).map(x => (\r\n    <h2 key={nanoid()} style={{ display: 'inline' }}>\r\n      {x},\r\n    </h2>\r\n  ))\r\n\r\n  if (activeColorDisplayFormat == 'hex') {\r\n    content = <h2 style={{ display: 'inline' }}>{trueColor}</h2>\r\n  } else if (activeColorDisplayFormat == 'rgb') {\r\n    content = <div>{rgb}</div>\r\n  } else if (activeColorDisplayFormat == 'hsl') {\r\n    content = <div>{hsl}</div>\r\n  }\r\n\r\n  return content\r\n}\r\n\r\nexport default DisplayFormat\r\n","import { nanoid } from 'nanoid'\r\nimport { Button } from 'reactstrap'\r\nimport ButtonComponent from './ButtonComponent'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { setActiveColorDisplayFormat } from '../store/gameSettings'\r\nimport RadioBtns from './RadioBtns'\r\nimport FormComponent from './FormComponent'\r\nimport DisplayFormat from './DisplayFormat'\r\n\r\nconst ColorGameControls = props => {\r\n  const { score, trueColor, customLvlName, customLvlBoxes, onLvlHandler } =\r\n    props\r\n  const dispatch = useDispatch()\r\n  const customLevels = useSelector(state => state.gameSettings.customLevels)\r\n  const displayColorFormat = DisplayFormat(trueColor)\r\n\r\n  const radioBtnHandler = prop => {\r\n    dispatch(setActiveColorDisplayFormat(prop))\r\n  }\r\n\r\n  return (\r\n    <div className='col-4 vh-100'>\r\n      <div className='d-flex justify-content-between border-bottom border-dark my-3 pb-3'>\r\n        <h2>score: {score}</h2>\r\n        <ButtonComponent onClick={() => props.onSaveScore()} color='success'>\r\n          save score\r\n        </ButtonComponent>\r\n        <ButtonComponent onClick={() => props.onResetScore()} color='danger'>\r\n          reset score\r\n        </ButtonComponent>\r\n      </div>\r\n\r\n      <div className='border-bottom border-dark'>\r\n        <h3>Guess the color?</h3>\r\n        {displayColorFormat}\r\n\r\n        <RadioBtns onChange={prop => radioBtnHandler(prop)} />\r\n      </div>\r\n\r\n      <div className='border-bottom border-dark my-3'>\r\n        <div className='d-flex justify-content-between border-bottom border-dark pb-3'>\r\n          {props.availableLevels.map(x => (\r\n            <Button\r\n              key={nanoid()}\r\n              onClick={() => onLvlHandler(x.boxesNumber)}\r\n              color='success'\r\n              className='mx-1'\r\n            >\r\n              {x.label}\r\n            </Button>\r\n          ))}\r\n          <ButtonComponent\r\n            onClick={() => props.onResetHandler()}\r\n            color='danger'\r\n          >\r\n            RESET LVL\r\n          </ButtonComponent>\r\n        </div>\r\n\r\n        <div className='overflow-auto my-3' style={{ maxHeight: '20vh' }}>\r\n          <h5>Custom levels:</h5>\r\n          {customLevels.map(x => (\r\n            <Button\r\n              key={nanoid()}\r\n              id={nanoid()}\r\n              onClick={() => onLvlHandler(x.boxesNumber)}\r\n              color='success'\r\n              className='m-2'\r\n            >\r\n              {x.label}\r\n            </Button>\r\n          ))}\r\n        </div>\r\n\r\n        <FormComponent\r\n          onSubmit={prop => props.onFormSubmissionHandler(prop)}\r\n          onChangeName={prop => props.onCustomLvlNameHandler(prop)}\r\n          onChangeLvl={prop => props.onCustomLvlHandler(prop)}\r\n          customLvlName={customLvlName}\r\n          customLvlBoxes={customLvlBoxes}\r\n        />\r\n\r\n        <Button\r\n          onClick={() => props.onDeleteCustomLvlsHandler()}\r\n          type='btn'\r\n          color='danger'\r\n          className='m-2'\r\n        >\r\n          delete custom levels\r\n        </Button>\r\n      </div>\r\n\r\n      <Button color='primary' onClick={() => props.onHint()}>\r\n        NEED HELP?\r\n      </Button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ColorGameControls\r\n","const hexGenerator = length => {\n\tlet result = '#'\n\tconst characters = 'abcdef0123456789'\n\tconst charactersLength = characters.length\n\tfor (let i = 0; i < length; i++) {\n\t\tresult += characters.charAt(Math.floor(Math.random() * charactersLength))\n\t}\n\treturn result\n}\n\nexport default hexGenerator\n","import { useSelector } from 'react-redux'\r\n\r\nimport {\r\n  setTrueColor,\r\n  setColors,\r\n  attemptsIncrement,\r\n  setScore,\r\n  attemptsReset,\r\n  setAllGenerated,\r\n} from '../store/gameInProgress'\r\nimport {\r\n  setBoxesNumber,\r\n  setCustomLevels,\r\n  deleteCustomLevels,\r\n  setHintActive,\r\n  setInitialBoxNumber,\r\n} from '../store/gameSettings'\r\n\r\nconst ReduxData = () => {\r\n  const allGenerated = useSelector(state => state.gameInProgress.allGenerated)\r\n  const score = useSelector(state => state.gameInProgress.score)\r\n  const attempts = useSelector(state => state.gameInProgress.attempts)\r\n  const colors = useSelector(state => state.gameInProgress.colors)\r\n  const trueColor = useSelector(state => state.gameInProgress.trueColor)\r\n  const activeLevel = useSelector(state => state.gameInProgress.activeLevel)\r\n  const availableLevels = useSelector(\r\n    state => state.gameSettings.availableLevels\r\n  )\r\n  const curBoxNumber = useSelector(state => state.gameSettings.curBoxNumber)\r\n  const hintActive = useSelector(state => state.gameSettings.hintActive)\r\n\r\n  const initialBoxNumber = useSelector(\r\n    state => state.gameSettings.initialBoxNumber\r\n  )\r\n\r\n  return {\r\n    setTrueColor,\r\n    setColors,\r\n    attemptsIncrement,\r\n    setScore,\r\n    attemptsReset,\r\n    setAllGenerated,\r\n    setBoxesNumber,\r\n    setCustomLevels,\r\n    deleteCustomLevels,\r\n    setHintActive,\r\n    setInitialBoxNumber,\r\n    allGenerated,\r\n    score,\r\n    attempts,\r\n    colors,\r\n    trueColor,\r\n    activeLevel,\r\n    availableLevels,\r\n    curBoxNumber,\r\n    hintActive,\r\n    initialBoxNumber,\r\n  }\r\n}\r\n\r\nexport default ReduxData\r\n","import { useEffect, useState } from 'react'\r\nimport ColorGamePlayground from './ColorGamePlayground'\r\nimport ColorGameControls from './ColorGameControls'\r\nimport hexGenerator from './HexGenerator'\r\nimport { useDispatch } from 'react-redux'\r\n\r\nimport ReduxData from './ReduxData'\r\n\r\nconst AppContainer = () => {\r\n  const dispatch = useDispatch()\r\n\r\n  const [customLvlName, setCustomLvlName] = useState('')\r\n  const [customLvlBoxes, setCustomLvlBoxes] = useState('')\r\n\r\n  const {\r\n    setTrueColor,\r\n    setColors,\r\n    attemptsIncrement,\r\n    setScore,\r\n    attemptsReset,\r\n    setAllGenerated,\r\n    setBoxesNumber,\r\n    setCustomLevels,\r\n    deleteCustomLevels,\r\n    setHintActive,\r\n    setInitialBoxNumber,\r\n    allGenerated,\r\n    score,\r\n    attempts,\r\n    colors,\r\n    trueColor,\r\n    availableLevels,\r\n    curBoxNumber,\r\n    hintActive,\r\n    initialBoxNumber,\r\n  } = ReduxData()\r\n\r\n  useEffect(() => {\r\n    dispatch(setScore(+window.localStorage.getItem('score')))\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (!hintActive) {\r\n      getNewColors()\r\n    }\r\n  }, [curBoxNumber])\r\n\r\n  const saveScore = () => {\r\n    window.localStorage.setItem('score', score)\r\n  }\r\n  const resetScore = () => {\r\n    dispatch(setScore(0))\r\n    window.localStorage.removeItem('score')\r\n  }\r\n\r\n  const getNewColors = () => {\r\n    const newColors = Array.from(Array(curBoxNumber).keys()).map(() =>\r\n      hexGenerator(6)\r\n    )\r\n    const randomer = newColors[Math.floor(Math.random() * newColors.length)]\r\n    dispatch(setTrueColor(randomer))\r\n    dispatch(setColors(newColors))\r\n    dispatch(setAllGenerated(true))\r\n  }\r\n\r\n  const checkColorHandler = x => {\r\n    if (x === trueColor) {\r\n      alert(\r\n        `Good job! You get it after ${attempts + 1} attempts, and recive ${\r\n          curBoxNumber - attempts\r\n        } points!`\r\n      )\r\n      dispatch(attemptsReset())\r\n      dispatch(setScore(score + curBoxNumber - attempts))\r\n      resetHandler()\r\n    } else {\r\n      const updatedList = colors.filter(item => x !== item)\r\n\r\n      dispatch(setColors(updatedList))\r\n      dispatch(attemptsIncrement())\r\n    }\r\n  }\r\n\r\n  const resetHandler = () => {\r\n    dispatch(setHintActive(false))\r\n    dispatch(setBoxesNumber(initialBoxNumber))\r\n    getNewColors()\r\n  }\r\n\r\n  const lvlHandler = boxesNumber => {\r\n    dispatch(setHintActive(false))\r\n    dispatch(setInitialBoxNumber(boxesNumber))\r\n    dispatch(setBoxesNumber(boxesNumber))\r\n  }\r\n\r\n  const customLvlHandler = prop => {\r\n    setCustomLvlBoxes(prop)\r\n  }\r\n\r\n  const customLvlNameHandler = prop => {\r\n    console.log(prop)\r\n    setCustomLvlName(prop)\r\n  }\r\n\r\n  const deleteCustomLvlsHandler = () => {\r\n    dispatch(deleteCustomLevels())\r\n  }\r\n\r\n  const formSubmissionHandler = e => {\r\n    e.preventDefault()\r\n    if (customLvlName === '' && customLvlBoxes === '') {\r\n      alert('Please, fill all fields!')\r\n    } else {\r\n      setCustomLvlBoxes('')\r\n      setCustomLvlName('')\r\n      const addLvl = {\r\n        label: customLvlName,\r\n        boxesNumber: +customLvlBoxes,\r\n      }\r\n\r\n      dispatch(setCustomLevels(addLvl))\r\n    }\r\n  }\r\n\r\n  const hintHandler = () => {\r\n    dispatch(setHintActive(true))\r\n    const withoutTrueColor = colors.filter(x => x !== trueColor)\r\n    const halfLength = Math.floor(withoutTrueColor.length / 2)\r\n    const halfSize = withoutTrueColor.splice(0, halfLength).concat(trueColor)\r\n\r\n    dispatch(attemptsReset())\r\n    dispatch(setColors(halfSize))\r\n    dispatch(setBoxesNumber(halfSize.length))\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {!allGenerated ? (\r\n        <h1>Generating data...</h1>\r\n      ) : (\r\n        <div className='d-flex container'>\r\n          <ColorGameControls\r\n            onHint={() => hintHandler()}\r\n            onSaveScore={() => saveScore()}\r\n            onResetScore={() => resetScore()}\r\n            onResetHandler={() => resetHandler()}\r\n            onColorToggler={() => colorToggler()}\r\n            onLvlHandler={boxesNumber => lvlHandler(boxesNumber)}\r\n            onCustomLvlHandler={prop => customLvlHandler(prop)}\r\n            onCustomLvlNameHandler={prop => customLvlNameHandler(prop)}\r\n            onDeleteCustomLvlsHandler={() => deleteCustomLvlsHandler()}\r\n            onFormSubmissionHandler={e => formSubmissionHandler(e)}\r\n            trueColor={trueColor}\r\n            customLvlName={customLvlName}\r\n            customLvlBoxes={customLvlBoxes}\r\n            availableLevels={availableLevels}\r\n            score={score}\r\n          />\r\n          <ColorGamePlayground\r\n            onCheckColor={checkColorHandler}\r\n            colors={colors}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AppContainer\r\n","import './App.css'\r\nimport AppContainer from './components/AppContainer'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className='App'>\r\n      <AppContainer />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport gameInProgress from './gameInProgress'\r\nimport gameSettings from './gameSettings'\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    gameInProgress: gameInProgress.reducer,\r\n    gameSettings: gameSettings.reducer,\r\n  },\r\n})\r\n","const reportWebVitals = onPerfEntry => {\n\tif (onPerfEntry && onPerfEntry instanceof Function) {\n\t\timport('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n\t\t\tgetCLS(onPerfEntry)\n\t\t\tgetFID(onPerfEntry)\n\t\t\tgetFCP(onPerfEntry)\n\t\t\tgetLCP(onPerfEntry)\n\t\t\tgetTTFB(onPerfEntry)\n\t\t})\n\t}\n}\n\nexport default reportWebVitals\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport store from './store/store'\r\nimport { Provider } from 'react-redux'\r\nimport reportWebVitals from './reportWebVitals'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport './index.css'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n"],"sourceRoot":""}